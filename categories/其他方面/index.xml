<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>其他方面 on 泽梅尔的驻留地</title><link>https://www.zling.site/categories/%E5%85%B6%E4%BB%96%E6%96%B9%E9%9D%A2/</link><description>Recent content in 其他方面 on 泽梅尔的驻留地</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 28 Oct 2021 21:42:14 +0800</lastBuildDate><atom:link href="https://www.zling.site/categories/%E5%85%B6%E4%BB%96%E6%96%B9%E9%9D%A2/index.xml" rel="self" type="application/rss+xml"/><item><title>Ubuntu中配置SVN服务器</title><link>https://www.zling.site/post/Ubuntu%E4%B8%AD%E9%85%8D%E7%BD%AESVN%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Thu, 28 Oct 2021 21:42:14 +0800</pubDate><guid>https://www.zling.site/post/Ubuntu%E4%B8%AD%E9%85%8D%E7%BD%AESVN%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>安装SVN服务器及创建仓库 1 2 sudo apt-get install subversion svnadmin create /home/pi/MY_SVN_REPOS SVN配置文件修改，进入到新建仓库下conf文件夹中，我们需要配置修改svnserve.conf、passwd以及authz三个文件。 1 2 3 pi@raspberrypi:~$ cd /home/pi/MY_SVN_REPOS/conf/ pi@raspberrypi:~/MY_SVN_REPOS/conf$ ls authz hooks-env.tmpl passwd svnserve.conf svnserve.conf文件修改，主要将一下三点前的#号去掉即可 1 2 3 4 5 6</description></item><item><title>Ubuntu使用记录</title><link>https://www.zling.site/post/Ubuntu%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 12 Jul 2021 12:55:26 +0800</pubDate><guid>https://www.zling.site/post/Ubuntu%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid><description>查看硬盘状况 sudo fdisk -l 使用 fdisk 分区 sudo fdisk /dev/sdb 格式化分区 sudo mkfs -t ext4 /dev/sdb1 挂载硬盘 创建挂载点，新建目录 mkdir ~/disk1 挂载 sudo mount /dev/sdb1 ~/disk1 自动挂载 查找硬盘 UUID ls -l /dev/disk/by-uuid/ 修改 /etc/fstab 文件，实现自动挂载 UUID=b543f8f7-579c-45b5-96d6-31de6fa1a55e /home/lgd/disk1 ext4 defaults 1 2</description></item><item><title>AspNetCore控制器的Action返回结果类型</title><link>https://www.zling.site/post/AspNetCore%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84Action%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%B1%BB%E5%9E%8B/</link><pubDate>Fri, 02 Jul 2021 12:48:31 +0800</pubDate><guid>https://www.zling.site/post/AspNetCore%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84Action%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%B1%BB%E5%9E%8B/</guid><description>特定类型(Specific type) Action可返回原始类型或复杂类型对象（例如 string 或 自定义类型）。以下代码显示返回自定义的Product类型对象： 1 2 3 [HttpGet] public List&amp;lt;Product&amp;gt; Get() =&amp;gt; _repository.GetProducts(); 当同时返回多个对象时，需要返回 ActionResult 类型的对象，将其与前边的多个对象整合。 返回 IEnumerable或 IAsyncEnumer</description></item><item><title>使用Frp实现内网穿透</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</link><pubDate>Fri, 02 Jul 2021 12:46:26 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</guid><description>使用 Frp 实现内网穿透 Frp 程序下载 https://github.com/fatedier/frp/releases frp 程序分为服务端和客户端，其中 frps 开头文件为服务端， frpc 开头文件为客户端 配置服务端 编辑 frps.ini 配置服务端 [common] bind_port = 7400 #客户端与服务端通信端口，要保持一致 vhost_http_port = 8080 #服务端监听的 http 流量端口 vhost_https_port = 8443 #服务端监听的 https 流量端口 token = 123456 #服务端与客户端验证端口，要保持一致，推荐使用</description></item><item><title>使用acmesh申请LetsEncrypt泛域名证书</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8acmesh%E7%94%B3%E8%AF%B7LetsEncrypt%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</link><pubDate>Fri, 02 Jul 2021 12:43:35 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8acmesh%E7%94%B3%E8%AF%B7LetsEncrypt%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</guid><description>使用 acme.sh 申请 Let&amp;rsquo;s Encrypt 泛域名证书 以下申请证书的过程以 NameSilo ，这个域名服务商为例，其它域名服务商的申请细节请结合以下链接参考： https://github.com/Neilpang/acme.sh/wiki/dnsapi 安装 acme.sh curl https://get.acme.sh | sh 获取域名服务商的api key NameSilo https://www.namesilo.com/account_api.php 设置api key 环境变量 以下是 NameSilo 的 api key 设置环境变量的方法，其他域名服务商请参考上方的链接 export Namesilo_Key=&amp;quot;xxxxxxxxxxxxxxxx&amp;quot; 申请证书 acme.sh --issue --dns dns_namesilo --dnssleep 900 -d yourdomain -d *.yourdomain 此处要等</description></item><item><title>安装Jira使用MariaDB数据库</title><link>https://www.zling.site/post/%E5%AE%89%E8%A3%85Jira%E4%BD%BF%E7%94%A8MariaDB%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Fri, 02 Jul 2021 12:40:56 +0800</pubDate><guid>https://www.zling.site/post/%E5%AE%89%E8%A3%85Jira%E4%BD%BF%E7%94%A8MariaDB%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>Jira 安装 安装环境及软件 Windows Server 2016 MariaDB 10.3.14 Jira 8.1.0 mysql-connector-java-5.1.47-bin.jar 步骤 安装 MariaDB 将 MariaDB 的 zip 安装包解压到指定目录，例如 C:\Program Files\MariaDB 新建数据库存储文件夹，例如 C:\Program Files\MariaDB\DB 以管理员身份运行 CMD，运行如下命令： mysql_install_db.exe &amp;ndash;datadir=C:\Program Files\MariaDB\DB &amp;ndash;service=MariaDB &amp;ndash;password=mima &amp;ndash;service 指定 MariaDB 的服务名 &amp;ndash;password 指定 root 密码 启动 MariaDB 服务 sc start MariaDB 进入到 MariaDB mysql -u root -p 为 Jira 创建专用数据库用户 CREATE USER &amp;lsquo;jira&amp;rsquo;@'%' IDENTIFIED BY &amp;lsquo;some_password&amp;rsquo;; GRANT ALL PRIVILEGES ON . TO &amp;lsquo;jira&amp;rsquo;@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;</description></item><item><title>Artifactory破解安装</title><link>https://www.zling.site/post/Artifactory%E7%A0%B4%E8%A7%A3%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 02 Jul 2021 12:39:58 +0800</pubDate><guid>https://www.zling.site/post/Artifactory%E7%A0%B4%E8%A7%A3%E5%AE%89%E8%A3%85/</guid><description>使用Docker安装Artifactory export JFROG_HOME=&amp;quot;/data/jfrog&amp;quot; mkdir -p $JFROG_HOME/artifactory/var/etc/ cd $JFROG_HOME/artifactory/var/etc/ touch ./system.yaml chown -R $UID:$GID $JFROG_HOME/artifactory/var chmod -R 777 $JFROG_HOME/artifactory/var docker run &amp;ndash;name artifactory &amp;ndash;restart always -v $JFROG_HOME/artifactory/var/:/var/opt/jfrog/artifactory -d -p 8081:8081 -p 8082:8082 releases-docker.jfrog.io/jfrog/artifactory-pro:latest 进入Artifatory容器 下载破解jar并运行 /opt/jfrog/artifactory/app/third-party/java/bin/java -jar artifactory-injector-1.1.jar 先破解后生成许可,复制许可 /opt/jfrog/artifactory/app/artifactory/tomcat eyJhcnRpZmFjdG9yeSI6eyJpZCI6IiIsIm93bmVyIjoicjRwMyIsInZhbGlkRnJvbSI6MTYxMzIwMDgxOTUwNiwiZXhwaXJlcyI6NDc2ODg3NDQxOTUwMywidHlwZSI6IkVOVEVSUFJJU0VfUExVUyIsInRyaWFsIjpmYWxzZSwicHJvcGVydGllcyI6e319fQ== 重启容器 访问 http://ip:8082 sudo nano /etc/docker/daemon.json { &amp;ldquo;insecure-registries&amp;rdquo;:[&amp;ldquo;hub.lab.lan:8081&amp;rdquo;] } sudo service docker restart</description></item><item><title>Protobuf用法记录</title><link>https://www.zling.site/post/Protobuf%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 04 May 2021 16:41:42 +0800</pubDate><guid>https://www.zling.site/post/Protobuf%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description>步骤 安装 Protocol 编译器 下载链接 文件名：protoc-$VERSION-$PLATFORM.zip 根据自己所在的开发环境下载。 或者 安装 Google.Protobuf.Tools NuGet 包 Protocal 运行时安装 安装 Google.Protobuf NuGet 包 Proto 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 syntax = &amp;#34;proto3&amp;#34;; // 使用的语法 import &amp;#34;other.proto&amp;#34;; // 引用其他消息 package my.project; // 打包，命名空间 option</description></item><item><title>使用Serilog作为日志系统</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Serilog%E4%BD%9C%E4%B8%BA%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 03 May 2021 22:21:58 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Serilog%E4%BD%9C%E4%B8%BA%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid><description>使用 简单使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 using System; using Serilog; namespace LogDemo { class Program { static void Main(string[] args) { Log.Logger = new LoggerConfiguration().WriteTo.Console().CreateLogger(); Log.Information(&amp;#34;The global logger has been configured&amp;#34;); } } } 通过设置 Log 类的静态成员 Logger 后，就可以使用 Log 类的静态方法输出日志。 完整用法（包括文件输出） 添加 Nuget 包 Serilog Serilog.Sinks.Console Serilog.Sinks.File code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 using System; using Serilog; namespace SerilogExample {</description></item><item><title>使用Docker部署Nexus3</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Nexus3/</link><pubDate>Sat, 01 May 2021 18:35:28 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Nexus3/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 version:&amp;#34;3.7&amp;#34;services:nexus3:image:sonatype/nexus3restart:unless-stoppedports:- &amp;#34;8081:8081&amp;#34;volumes:- nexus_data:/nexus-datacontainer_name:nexus3volumes:nexus_data:</description></item><item><title>Debian用法记录</title><link>https://www.zling.site/post/Debian%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Sat, 01 May 2021 10:17:40 +0800</pubDate><guid>https://www.zling.site/post/Debian%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description>关机 1. systemctl poweroff 重启 1. systemctl reboot 设置临时环境变量 export PATH=$PATH:/home/xyz/Tesseract/bintesseract 设置永久环境变量 1. 对所有用户 // 编辑 /etc/profile export PATH=&amp;quot;$PATH:/home/xyz/Tesseract/bin&amp;quot; 2. 对当前用户 // 编辑 ~/.bashrc export PATH=&amp;quot;$PATH:/home/xyz/Tesseract/bin&amp;quot; 最后需要 source ~/.bashrc 查看版本 cat /etc/issue 挂载新硬盘 1 2 3 4 5 6 7 8 9 10 11 12 13 14 sudo fdisk -l // 查看硬盘设备及分区 sudo fdisk /dev/sda // 操作硬盘 sudo mkfs -t ext4 -c /dev/sda1 // 格式化分区 -c 用于检查坏道，比较耗时。 // 挂载分区 sudo mkdir /mnt/data1 sudo mount /dev/sda1</description></item><item><title>Docker常用命令</title><link>https://www.zling.site/post/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Fri, 30 Apr 2021 17:40:59 +0800</pubDate><guid>https://www.zling.site/post/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>进入容器 docker exec -it [容器ID] /bin/bash 创建卷 docker volume create my-vol 列出所有卷 docker volume ls 查看卷详情 docker volume inspect my-vol 移除卷 docker volume rm my-vol 修改 Docker 的默认存储路径 sudo docker info sudo nano /etc/docker/daemon.json { &amp;quot;data-root&amp;quot;: &amp;quot;/www/docker&amp;quot; }</description></item><item><title>使用Docker运行Consul</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CConsul/</link><pubDate>Fri, 23 Apr 2021 16:16:07 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CConsul/</guid><description>单节点 开发模式 mkdir -p /data/consul-data mkdir -p /data/consul-conf docker run -d -p 8500:8500 -p 8600:8600/udp -v /data/consul-data:/consul/data -v /data/consul-conf:/consul/config --name=consul_server consul agent -dev -ui -node=consul-server -bootstrap-expect=1 -client=0.0.0.0 -data-dir /consul/data -config-dir /consul/config</description></item><item><title>使用Docker运行Redis</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CRedis/</link><pubDate>Fri, 23 Apr 2021 14:43:14 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CRedis/</guid><description>Use Command 1 docker run -d --restart=always --name redis -p 6379:6379 redis --requirepass 123456</description></item><item><title>使用Docker运行MongoDB</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CMongoDB/</link><pubDate>Fri, 23 Apr 2021 12:37:29 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CMongoDB/</guid><description>Use Docker-Compose version: '3.1' services: mongo: image: mongo restart: always environment: MONGO_INITDB_ROOT_USERNAME: root MONGO_INITDB_ROOT_PASSWORD: example volumes: - db_store:/data/db ports: - 27017:27017 volumes: db_store: {}</description></item><item><title>MySql的用法记录</title><link>https://www.zling.site/post/MySql%E7%9A%84%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 06 Apr 2021 22:12:49 +0800</pubDate><guid>https://www.zling.site/post/MySql%E7%9A%84%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description>MySql 中的DataType 类型 含义 范围 数值类型 INT 整数 -2147483647 ~ 2147483647 TINYINT 极小整数 -128 ~ 127 SMALLINT 小整数 -32768 ~ 32767 MEDIUMINT 中等整数 -8388608 ~ 8388607 BIGINT 大整数 -9223372036854775808 ~ 9223372036854775807 FLOAT 单精度浮点数 -3.402823466E+38 ~ -1.175494351E-38 0 1.175494351E-38 ~ 3.402823466E+38 DOUBLE 双精度浮点数 -1.7976931348623157E+308 ~ -2.2250738585072014E-308 0 2.2250738585072014E-308 ~ 1.7976931348623157E+308 DECIMAL 精确小数 DECIMAL(最大位数，小数点后的位数) 最大位数可指定不大于65的值，小数点之后的位数不大于30 字</description></item><item><title>Rider用法记录</title><link>https://www.zling.site/post/Rider%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 06 Apr 2021 12:31:02 +0800</pubDate><guid>https://www.zling.site/post/Rider%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description>设置Snippet File-&amp;gt;Setting-&amp;gt;Editor-&amp;gt;livetemplates 右上角的按钮从上到下分别是：新建Snippet，复制已有的Snippet，删除Snippet 可通过设置变量（$variablename$）来占位，使用时在变量的位置填入内容即可，或编辑变量，使用默认的宏。 示例 1 2 3 4 5 6 7 8 private static $classname$ _instance; public static $classname$ Instance =&amp;gt; _instance ??= new $classname$(); private $classname$ () { $END$</description></item><item><title>使用Excel生成xml</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Excel%E7%94%9F%E6%88%90xml/</link><pubDate>Sun, 04 Apr 2021 22:45:07 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Excel%E7%94%9F%E6%88%90xml/</guid><description>制作 XML 模板 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;root&amp;gt; &amp;lt;item ID=&amp;#34;&amp;#34;&amp;gt; &amp;lt;surname&amp;gt;&amp;lt;/surname&amp;gt; &amp;lt;man&amp;gt;&amp;lt;/man&amp;gt; &amp;lt;woman&amp;gt;&amp;lt;/woman&amp;gt; &amp;lt;/item&amp;gt; &amp;lt;item ID=&amp;#34;&amp;#34;&amp;gt; &amp;lt;surname&amp;gt;&amp;lt;/surname&amp;gt; &amp;lt;man&amp;gt;&amp;lt;/man&amp;gt; &amp;lt;woman&amp;gt;&amp;lt;/woman&amp;gt; &amp;lt;/item&amp;gt; &amp;lt;/root&amp;gt; 在 Excel 选项中启用开发工具 Excel 映射 XML 模板 然后映射元素，填充数据 使用开发工具的 XML 导出，即可生成 XML 文件</description></item><item><title>AspNetCore学习记录(1)</title><link>https://www.zling.site/post/AspNetCore%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</link><pubDate>Fri, 26 Mar 2021 22:19:59 +0800</pubDate><guid>https://www.zling.site/post/AspNetCore%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</guid><description>配置MVC 修改Startup文件成如下所示： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.AspNetCore.Http; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; namespace MockSchool { public class Startup { public void ConfigureServices(IServiceCollection services) { // 设置 EnableEndpointRouting 为 false 是为了使用 MVC 默认路由 //services.AddMvc(a =&amp;gt; a.EnableEndpointRouting = false); // 使用 AddControllersWithViews 而不使用 AddMvc 是为了不引入 RazorPages // 等未用到的服务 services.AddControllersWithViews(a =&amp;gt; a.EnableEndpointRouting = false); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env)</description></item><item><title>Markdown语法</title><link>https://www.zling.site/post/Markdown%E8%AF%AD%E6%B3%95/</link><pubDate>Fri, 26 Mar 2021 10:16:51 +0800</pubDate><guid>https://www.zling.site/post/Markdown%E8%AF%AD%E6%B3%95/</guid><description>标题（Headings） 要创建标题，请在单词或短语前面添加井号 (#) 。井号的数量代表了标题的级别。例如，添加三个井号即创建一个三级标题 ### My Header My Header 段落 在每行的的末尾空格两下并回车或是直接在两行间间隔一行空白行，这样就可以形成换行效果。 图片 本地图片 ![图片描述](/iii.png) 网络图</description></item><item><title>使用Docker部署Trilium</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Trilium/</link><pubDate>Thu, 25 Mar 2021 13:26:38 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Trilium/</guid><description>docker-compose 1 2 3 4 5 6 7 8 9 10 version:&amp;#34;3.7&amp;#34;services:trilium:image:zadam/triliumrestart:unless-stoppedports:- &amp;#34;8080:8080&amp;#34;volumes:- /data/trilium/data:/home/node/trilium-data 1 docker-compose up -d 遇到容器里的权限问题 internal/fs/utils.js:269 throw err; ^ Error: EACCES: permission denied, mkdir '/home/node/trilium-data/log' at Object.mkdirSync (fs.js:921:3) at Object.&amp;lt;anonymous&amp;gt; (/usr/src/app/src/services/log.js:7:8) at Module._compile (internal/modules/cjs/loader.js:1015:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1035:10) at Module.load (internal/modules/cjs/loader.js:879:32) at Function.Module._load (internal/modules/cjs/loader.js:724:14) at Module.require (internal/modules/cjs/loader.js:903:19) at require (internal/modules/cjs/helpers.js:74:18) at Object.&amp;lt;anonymous&amp;gt; (/usr/src/app/src/app.js:1:13) at Module._compile (internal/modules/cjs/loader.js:1015:30) { errno: -13, syscall: 'mkdir', code: 'EACCES', path: '/home/node/trilium-data/log' } 解决办法 chown -R 1000:1000 /data/trilium/data/</description></item><item><title>使用Docker部署Caddy</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Caddy/</link><pubDate>Wed, 24 Mar 2021 18:32:49 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Caddy/</guid><description>docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 version:&amp;#34;3.7&amp;#34;services:caddy:image:caddyrestart:unless-stoppedports:- &amp;#34;80:80&amp;#34;- &amp;#34;443:443&amp;#34;volumes:- /data/caddy/Caddyfile:/etc/caddy/Caddyfile- /data/caddy/site:/srv- caddy_data:/data- caddy_config:/configcontainer_name:caddyvolumes:caddy_data:caddy_config: 1 docker-compose up -d 注意一点 /data/caddy/Caddyfile 需要提前创建好 Caddyfile Caddy有两种配置格式：1. json 2. Caddyfile，由于Caddyfile较为简洁，因此选用了这种方式。 Example localhost respond &amp;quot;Hello, world!&amp;quot; 静态内容 your_domain { root * /var/www file_server } 反向代理 your_domain { reverse_proxy your_server_ip:port } Compare 以下是Json格式和Caddyfi</description></item><item><title>使用hugo搭建静态博客</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link><pubDate>Tue, 23 Mar 2021 22:36:20 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid><description>安装Go Go安装地址，下载相应版本的Go安装器，按步骤安装即可。 安装Hugo 去Hugo的Github上下载，hugo_extended版的压缩包，然后解压到指定目录，并将Hugo执行文件所在目录加入到Path环境变量中。 在终端中执行以下命令判断Hugo是否安装成功： 1 hugo version 创建Hu</description></item></channel></rss>