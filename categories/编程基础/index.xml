<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程基础 on 泽梅尔的驻留地</title><link>https://www.zling.site/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</link><description>Recent content in 编程基础 on 泽梅尔的驻留地</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 10 Oct 2021 16:17:16 +0800</lastBuildDate><atom:link href="https://www.zling.site/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml"/><item><title>洗牌算法</title><link>https://www.zling.site/post/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 10 Oct 2021 16:17:16 +0800</pubDate><guid>https://www.zling.site/post/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/</guid><description>暴力洗牌 n个元素共有n!个排列，暴力枚举每种情况，从中获取的一种作为洗牌结果。O(n!)复杂度。 Knuth洗牌算法 1 2 3 4 5 6 7 8 public static void Shuffle&amp;lt;T&amp;gt;(IList&amp;lt;T&amp;gt; items) { var rn = new Random((int) DateTime.Now.Ticks); for (var i = items.Count - 1; i &amp;gt;= 0; i--) { Swap(items, i, rn.Next(i + 1)); } }</description></item><item><title>设计模式之工厂方法模式</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 05 Sep 2021 16:09:25 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid><description>工厂方法模式 定义 定义一个可以产生对象的接口，但是让子类决定要产生哪个类的对象。工厂方法模式让类的实例化程序推迟到子类中实现。 UML 实现方式 由子类决定生产哪个类的对象 在工厂方法中增加参数，由参数决定生产哪个类对象 使用泛型类 使用泛型工厂方法 注意</description></item><item><title>设计模式之模板方法模式（TemplateMethod）</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8FTemplateMethod/</link><pubDate>Mon, 10 May 2021 11:36:42 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8FTemplateMethod/</guid><description>定义 在一个操作方法中定义算法流程，其中某些步骤由子类完成。模板方法模式让子类在不变更原有流程的情况下，还能够重新定义其中的步骤。</description></item><item><title>设计模式之策略模式（Strategy）</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8FStrategy/</link><pubDate>Thu, 06 May 2021 17:06:53 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8FStrategy/</guid><description>定义 定义一组算法，并封装每个算法，使其可相互替换使用。根据不同的条件选择不同的策略。 有多种方式实现同一个目的（或达到相似的结果）时，</description></item><item><title>算法之排序</title><link>https://www.zling.site/post/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/</link><pubDate>Thu, 06 May 2021 12:24:35 +0800</pubDate><guid>https://www.zling.site/post/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/</guid><description>选择排序 算法描述 算法复杂度 c# 代码实现 插入排序 算法描述 算法复杂度 c# 代码实现 希尔排序 算法描述 算法复杂度 c# 代码实现 归并排序 算法描述 将要排序的数组分成两半分别排序后归并。 算法复杂度 时间复杂度 NlogN 空间复杂度 N c# 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37</description></item><item><title>设计模式之桥接模式（Bridge）</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8FBridge/</link><pubDate>Sun, 02 May 2021 10:39:22 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8FBridge/</guid><description>桥接模式 定义 将抽象和实现分离，以达到二者独立进化的目的。 UML 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 public abstract class Implementor { public abstract void OperatorImp(); } public class ConcreteImplementor1 : Implementor { public override void OperatorImp() { Debug.Log($&amp;#34;执行{nameof(ConcreteI</description></item><item><title>设计模式之中介者模式（Mediator）</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8FMediator/</link><pubDate>Sat, 01 May 2021 12:15:01 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8FMediator/</guid><description>中介者模式 定义 将子系统间的互动委托给中介者，减少子系统相互调用的耦合，子系统通过中介者交互。 UML 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 public abstract class Mediator { public abstract void SendMessage(Colleague colleague, string message); }</description></item><item><title>设置模式之外观模式（Facade）</title><link>https://www.zling.site/post/%E8%AE%BE%E7%BD%AE%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8FFacade/</link><pubDate>Thu, 29 Apr 2021 22:20:45 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E7%BD%AE%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8FFacade/</guid><description>外观模式 定义 为子系统定义一组统一的接口，这个高级的接口会让子系统更容易被使用。 优点 统一接口，避免了客户端与各个子系统间的耦合。 增加了客户端复用的能力。 易于分工，使用者不必关心子系统的实现和使用细节，只需调用外观模式定义的高级接口就行。 注意事项 在使用外观模式时，十分容易将高级接口设</description></item><item><title>设计模式之状态模式（State）</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8FState/</link><pubDate>Mon, 26 Apr 2021 23:41:37 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8FState/</guid><description>定义 让一个对象的行为随着内部状态的变更而改变，而该对象就像是换了类一样。 UML Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 using UnityEngine; public class Context { private State _state; public void Request(int value) { _state.Handle(value); } public void SetState(State state) { Debug.Log($&amp;#34;Context.SetState:{state}&amp;#34;); _state = state; } } public abstract class State</description></item><item><title>设计模式之面向对象的设计原则</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</link><pubDate>Fri, 23 Apr 2021 16:33:55 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</guid><description>单一职责原则 每个类只负责一件事 开闭原则 对扩展开放，对修改关闭。将类中的功能上提抽象为接口，具体的功能实现下放到子类。 里氏替换原则 使用到父类的地方都能够用子类去替换。对于具体使用到哪个子类是无感的，透明的。 依赖倒置原则 高层模块不应该直接依赖底层模块，而是依赖于抽象。(让底层模块通过</description></item><item><title>设计模式之单例模式</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Tue, 13 Apr 2021 20:54:49 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>简述 单例模式用于生成特定类在程序的完整生命周期中唯一的实例化对象。 实现方式 方式一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class Singleton { private static Singleton _instance; public static Singleton Instance { get { if(_instance == null) _instance = new Singleton(); return _instance; } } private Singleton() { //TODO anything } } 懒汉式或者说是延迟加载的主要问题在于线程不安全，在多线程环境下，容易创建多个实例，也就无法保证类实</description></item></channel></rss>