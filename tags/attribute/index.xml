<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>attribute on 泽梅尔的驻留地</title><link>https://www.zling.site/tags/attribute/</link><description>Recent content in attribute on 泽梅尔的驻留地</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 01 Sep 2021 15:27:16 +0800</lastBuildDate><atom:link href="https://www.zling.site/tags/attribute/index.xml" rel="self" type="application/rss+xml"/><item><title>Unity的RuntimeInitializeOnLoadMethodAttribute特性</title><link>https://www.zling.site/post/Unity%E7%9A%84RuntimeInitializeOnLoadMethodAttribute%E7%89%B9%E6%80%A7/</link><pubDate>Wed, 01 Sep 2021 15:27:16 +0800</pubDate><guid>https://www.zling.site/post/Unity%E7%9A%84RuntimeInitializeOnLoadMethodAttribute%E7%89%B9%E6%80%A7/</guid><description>RuntimeInitializeOnLoadMethodAttribute 被标记为 RuntimeInitializeOnLoadMethodAttribute 的方法在游戏加载后就被调用，同时在Awake之后调用。 同时需要注意的是，所有被标记为 RuntimeInitializeOnLoadMethodAttribute 的方法，它们之间被调用的顺序是不一定的。 同时该特性还拥有可选参数 loadType，该参数决定了被标记的方法是在场景加载前还是加载后被调用。</description></item><item><title>Unity中的RuntimeRuntimeInitializeOnLoadMethodAttribute</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84RuntimeRuntimeInitializeOnLoadMethodAttribute/</link><pubDate>Mon, 26 Apr 2021 22:27:49 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84RuntimeRuntimeInitializeOnLoadMethodAttribute/</guid><description>被此特性标注的方法将在 Awake 方法之后被 Unity 循环调用，而且被此特性标记的所有方法，它们之间的执行顺序不是固定的。 示例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 using UnityEngine; public class MyTest : MonoBehaviour { [RuntimeInitializeOnLoadMethod] static void OnRuntimeMethodLoad() { Debug.Log(&amp;#34;After Scene is loaded and game is running&amp;#34;); } [RuntimeInitializeOnLoadMethod] static void OnSecondRuntimeMethodLoad() { Debug.Log(&amp;#34;SecondMethod After Scene is loaded and game is running.&amp;#34;); } private void Awake() { Debug.Log(&amp;#34;Awake method&amp;#34;); } private void Start() { Debug.Log(&amp;#34;Start method&amp;#34;); } } 结果：</description></item></channel></rss>