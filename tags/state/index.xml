<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>state on 🦁泽梅尔的驻留地</title><link>https://zemelling.github.io/tags/state/</link><description>Recent content in state on 🦁泽梅尔的驻留地</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy; 2021 &lt;a href="https://zemelling.github.io/">Zemel Ling&lt;/a></copyright><lastBuildDate>Mon, 26 Apr 2021 23:41:37 +0800</lastBuildDate><atom:link href="https://zemelling.github.io/tags/state/index.xml" rel="self" type="application/rss+xml"/><item><title>设计模式之状态模式（State）</title><link>https://zemelling.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8Fstate/</link><pubDate>Mon, 26 Apr 2021 23:41:37 +0800</pubDate><guid>https://zemelling.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8Fstate/</guid><description>定义 让一个对象的行为随着内部状态的变更而改变，而该对象就像是换了类一样。 UML Code using UnityEngine; public class Context { private State _state; public void Request(int value) { _state.Handle(value); } public void SetState(State state) { Debug.Log($&amp;quot;Context.SetState:{state}&amp;quot;); _state = state; } } public abstract class State { protected Context _context; public State(Context</description></item></channel></rss>