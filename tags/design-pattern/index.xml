<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design pattern on 🦁泽梅尔的驻留地</title><link>https://www.zling.site/tags/design-pattern/</link><description>Recent content in design pattern on 🦁泽梅尔的驻留地</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy; 2021 &lt;a href="https://www.zling.site/">Zemel Ling&lt;/a> | &lt;a href="https://beian.miit.gov.cn">闽ICP备2021013106号&lt;/a></copyright><lastBuildDate>Sun, 05 Sep 2021 16:09:25 +0800</lastBuildDate><atom:link href="https://www.zling.site/tags/design-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>设计模式之工厂方法模式</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 05 Sep 2021 16:09:25 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid><description>工厂方法模式 定义 定义一个可以产生对象的接口，但是让子类决定要产生哪个类的对象。工厂方法模式让类的实例化程序推迟到子类中实现。 UML 实现方式 由子类决定生产哪</description></item><item><title>设计模式之模板方法模式（TemplateMethod）</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8Ftemplatemethod/</link><pubDate>Mon, 10 May 2021 11:36:42 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8Ftemplatemethod/</guid><description>定义 在一个操作方法中定义算法流程，其中某些步骤由子类完成。模板方法模式让子类在不变更原有流程的情况下，还能够重新定义其中的步骤。</description></item><item><title>设计模式之策略模式（Strategy）</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8Fstrategy/</link><pubDate>Thu, 06 May 2021 17:06:53 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8Fstrategy/</guid><description>定义 定义一组算法，并封装每个算法，使其可相互替换使用。根据不同的条件选择不同的策略。 有多种方式实现同一个目的（或达到相似的结果）时，</description></item><item><title>设计模式之桥接模式（Bridge）</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8Fbridge/</link><pubDate>Sun, 02 May 2021 10:39:22 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8Fbridge/</guid><description>桥接模式 定义 将抽象和实现分离，以达到二者独立进化的目的。 UML 代码 public abstract class Implementor { public abstract void OperatorImp(); } public class ConcreteImplementor1 : Implementor { public override void OperatorImp() { Debug.Log($&amp;quot;执行{nam</description></item><item><title>设计模式之中介者模式（Mediator）</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8Fmediator/</link><pubDate>Sat, 01 May 2021 12:15:01 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8Fmediator/</guid><description>中介者模式 定义 将子系统间的互动委托给中介者，减少子系统相互调用的耦合，子系统通过中介者交互。 UML 代码 public abstract class Mediator { public abstract void SendMessage(Colleague colleague, string message); } public class ConcreteMediator : Mediator { private ConcreteColleague1 _colleague1 = null; private ConcreteColleague2</description></item><item><title>设置模式之外观模式（Facade）</title><link>https://www.zling.site/posts/%E8%AE%BE%E7%BD%AE%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8Ffacade/</link><pubDate>Thu, 29 Apr 2021 22:20:45 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E7%BD%AE%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8Ffacade/</guid><description>外观模式 定义 为子系统定义一组统一的接口，这个高级的接口会让子系统更容易被使用。 优点 统一接口，避免了客户端与各个子系统间的耦合。 增加了客户端复用的能力。</description></item><item><title>设计模式之状态模式（State）</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8Fstate/</link><pubDate>Mon, 26 Apr 2021 23:41:37 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8Fstate/</guid><description>定义 让一个对象的行为随着内部状态的变更而改变，而该对象就像是换了类一样。 UML Code using UnityEngine; public class Context { private State _state; public void Request(int value) { _state.Handle(value); } public void SetState(State state) { Debug.Log($&amp;quot;Context.SetState:{state}&amp;quot;); _state = state; } } public abstract class State { protected Context _context; public State(Context</description></item><item><title>设计模式之面向对象的设计原则</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</link><pubDate>Fri, 23 Apr 2021 16:33:55 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</guid><description>单一职责原则 每个类只负责一件事 开闭原则 对扩展开放，对修改关闭。将类中的功能上提抽象为接口，具体的功能实现下放到子类。 里氏替换原则 使用到父类的地方都能够</description></item><item><title>设计模式之单例模式</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Tue, 13 Apr 2021 20:54:49 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>简述 单例模式用于生成特定类在程序的完整生命周期中唯一的实例化对象。 实现方式 方式一 public class Singleton { private static Singleton _instance; public static Singleton Instance { get { if(_instance == null) _instance = new Singleton(); return _instance; } } private Singleton() { //TODO anything } } 懒汉</description></item></channel></rss>