<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>unity on 🐉泽梅尔的驻留地</title><link>https://blog.zling.site/tags/unity/</link><description>Recent content in unity on 🐉泽梅尔的驻留地</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy; 2021 &lt;a href="https://blog.zling.site/">Zemel Ling&lt;/a></copyright><lastBuildDate>Tue, 10 Aug 2021 10:04:34 +0800</lastBuildDate><atom:link href="https://blog.zling.site/tags/unity/index.xml" rel="self" type="application/rss+xml"/><item><title>自建UnityPackageServer</title><link>https://blog.zling.site/posts/%E8%87%AA%E5%BB%BAunitypackageserver/</link><pubDate>Tue, 10 Aug 2021 10:04:34 +0800</pubDate><guid>https://blog.zling.site/posts/%E8%87%AA%E5%BB%BAunitypackageserver/</guid><description>docker 安装 verdaccio</description></item><item><title>Unity中游戏对象产生碰撞的条件</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E6%B8%B8%E6%88%8F%E5%AF%B9%E8%B1%A1%E4%BA%A7%E7%94%9F%E7%A2%B0%E6%92%9E%E7%9A%84%E6%9D%A1%E4%BB%B6/</link><pubDate>Tue, 22 Jun 2021 22:29:17 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E6%B8%B8%E6%88%8F%E5%AF%B9%E8%B1%A1%E4%BA%A7%E7%94%9F%E7%A2%B0%E6%92%9E%E7%9A%84%E6%9D%A1%E4%BB%B6/</guid><description>其中至少一个物体（必须运动的）必须带有碰撞器（collider）+刚体(Rigidbody)，另一个物体（可以静止也可以运动）也必须至少带有colli</description></item><item><title>Unity中的欧拉角和四元数</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E6%AC%A7%E6%8B%89%E8%A7%92%E5%92%8C%E5%9B%9B%E5%85%83%E6%95%B0/</link><pubDate>Tue, 01 Jun 2021 17:18:09 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E6%AC%A7%E6%8B%89%E8%A7%92%E5%92%8C%E5%9B%9B%E5%85%83%E6%95%B0/</guid><description>在 Unity 有两种方式用于表示旋转，欧拉角和四元数。其中欧拉角用于查看和编辑，引擎内部使用四元数来表示。 欧拉角 欧拉角具有三个数字，分别表示绕 x 轴、y 轴和 z 轴旋</description></item><item><title>Unity中的Tilemap</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84tilemap/</link><pubDate>Tue, 18 May 2021 15:06:16 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84tilemap/</guid><description>用法 导入图片资源，并将其 Texture Type 设置为 (2D Sprite and UI) 创建 Tilemap 打开 TilePalette 窗口，创建 Palette Grid Grid 对象用于对齐瓦片等对象。 TileMap Tile RuleTile RuleTile的Inspection界面存在一个</description></item><item><title>Unity中的Sprites</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84sprites/</link><pubDate>Mon, 17 May 2021 20:32:36 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84sprites/</guid><description>什么是 Sprites Sprites 是 2D 图形对象，在 3D 中本质是标准纹理。 Unity 中的 Sprite 工具 Sprite Creator 用于创建占位用的 Sprite，之后有具体的素材后再替换。 Sprite Editor 用于从一张图片或纹理中切割出</description></item><item><title>Unity中的RuntimeRuntimeInitializeOnLoadMethodAttribute</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84runtimeruntimeinitializeonloadmethodattribute/</link><pubDate>Mon, 26 Apr 2021 22:27:49 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84runtimeruntimeinitializeonloadmethodattribute/</guid><description>被此特性标注的方法将在 Awake 方法之后被 Unity 循环调用，而且被此特性标记的所有方法，它们之间的执行顺序不是固定的。 示例： using UnityEngine; public class MyTest : MonoBehaviour { [RuntimeInitializeOnLoadMethod] static void OnRuntimeMethodLoad() { Debug.Log(&amp;quot;After Scene is loaded and game is</description></item><item><title>Unity中的资源系统</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F/</link><pubDate>Thu, 15 Apr 2021 12:15:15 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F/</guid><description>资源 Unity通过将资源的唯一 ID 写入与资源同名的 .meta 文件来确保对资源的唯一引用。 新增的资源 Unity 都会创建与之对应的 .meta 文件 Unity 读取并处理 Assets 文件夹中的任何文件，并</description></item><item><title>Unity中使用ILRuntime进行热更新</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E4%BD%BF%E7%94%A8ilruntime%E8%BF%9B%E8%A1%8C%E7%83%AD%E6%9B%B4%E6%96%B0/</link><pubDate>Thu, 15 Apr 2021 09:43:53 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E4%BD%BF%E7%94%A8ilruntime%E8%BF%9B%E8%A1%8C%E7%83%AD%E6%9B%B4%E6%96%B0/</guid><description/></item><item><title>Unity中事件函数的执行顺序</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</link><pubDate>Wed, 14 Apr 2021 09:37:25 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</guid><description>阶段 主要阶段 初始化阶段，包含 Awake() Start() 物理系统更新阶段，包含 FixedUpdate()、动画更新、OnTriggerXXX、OnCollisionXXX，物</description></item><item><title>Unity中引用第三方程序集</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E5%BC%95%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E7%A8%8B%E5%BA%8F%E9%9B%86/</link><pubDate>Mon, 05 Apr 2021 22:32:04 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E5%BC%95%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E7%A8%8B%E5%BA%8F%E9%9B%86/</guid><description>在 Unity 中是通过插件（注意，此处的插件特指预编译的程序集或原生库，与编辑器插件代码区分开）的形式引用第三方程序集或原生库，其中引用的 .NET 程序集称作托管插件，</description></item><item><title>Unity中的项目设置说明</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E8%AF%B4%E6%98%8E/</link><pubDate>Mon, 05 Apr 2021 14:11:24 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E8%AF%B4%E6%98%8E/</guid><description>项目设置 Edit &amp;gt; Project Settings 此处打开项目设置窗口。 Player Player 界面用于设置最终生成的游戏包相关的设置。多数与具体平台有关。 Android Other Settings Configuration API Compatibility Level .Net Standard 2.0 兼容 .NET Standard 2.0。生成较小的构</description></item><item><title>Unity中的特殊文件夹和脚本编译顺序</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E8%84%9A%E6%9C%AC%E7%BC%96%E8%AF%91%E9%A1%BA%E5%BA%8F/</link><pubDate>Mon, 05 Apr 2021 13:24:47 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E8%84%9A%E6%9C%AC%E7%BC%96%E8%AF%91%E9%A1%BA%E5%BA%8F/</guid><description>特殊文件夹 Assets Assets 文件夹是包含 Unity 项目使用的资源的主文件夹。Editor 中的 Project 窗口的内容直接对应于 Assets 文件夹的内容。大多数 API 函数都假定所有内容都位于 Assets 文件夹中</description></item><item><title>Unity中的程序集定义</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%AE%9A%E4%B9%89/</link><pubDate>Mon, 05 Apr 2021 13:15:45 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%AE%9A%E4%B9%89/</guid><description>程序集定义（Assembly Definitions） Unity 使用程序集定义和程序集引用（Assembly References）组织代码结构，同时 Unity 默认使用预</description></item><item><title>Unity中获取对象的方法</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Sun, 04 Apr 2021 17:39:33 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>直接关联 在脚本中创建public的想要关联的游戏对象类型的变量，随后在inspector中关联对应的游戏对象即可 public class Enemy : MonoBehaviour { public GameObject player; // 其他变量和函数..</description></item><item><title>Unity中的资源加载</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/</link><pubDate>Sun, 04 Apr 2021 16:18:57 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/</guid><description>加载方式 将 Prefab 拖拽到 Inspector 的脚本上 这是最简单的方式，但是在实际项目中通常不使用，因为这种方式不够灵活，拖拽的方式低效，存在大量的隐式耦合。 public class Test : MonoBehaviour { public GameObject prefab;</description></item><item><title>Unity中的场景</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E5%9C%BA%E6%99%AF/</link><pubDate>Sun, 04 Apr 2021 16:18:51 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E5%9C%BA%E6%99%AF/</guid><description>Scene 场景是 Unity 中由于放置游戏对象和UI元素的资源文件。 创建场景 使用新建场景对话框（ New Scene Dialog）根据指定的场景模板创建场景。 使用菜单或项目窗口根据项目</description></item><item><title>Unity中实现存档的方式</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%AD%98%E6%A1%A3%E7%9A%84%E6%96%B9%E5%BC%8F/</link><pubDate>Sun, 04 Apr 2021 13:23:06 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%AD%98%E6%A1%A3%E7%9A%84%E6%96%B9%E5%BC%8F/</guid><description>PlayerPrefs PlayerPrefs 是 Unity 中用于存储用户数据的类，且只能够存储一些基本类型数据。 存储路径 存储路径取决于所在操作系统。 Windows: 存在注册表的 HKCU\Software\ExampleCompanyName\ExampleProductName Key 下 Windows Store Apps: 存在 %userprofile%\AppData\Local\Packages[ProductPackageId]\LocalState\playerprefs.dat 文件里 macOS: ~/Library/Preferences/com.ExampleCompanyName.ExampleProductName.plist Linux: ~/.config/unity3d/ExampleCompanyName/ExampleProductName 静态方</description></item><item><title>Unity中UGUI的自适应</title><link>https://blog.zling.site/posts/unity%E4%B8%ADugui%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94/</link><pubDate>Sat, 03 Apr 2021 14:35:22 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%ADugui%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94/</guid><description>设置 Canvas 的缩放模式为 Match Width Or Height 设置 Canvas 的 Match 为 Height（如果为横板游戏的话） 然后设置 UI 组件的锚点</description></item><item><title>Unity中的光照</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E5%85%89%E7%85%A7/</link><pubDate>Fri, 02 Apr 2021 16:11:55 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E5%85%89%E7%85%A7/</guid><description>Unity中的光照类型 直接光照和间接光照 直接光照指照射到物体表面只反射一次后就传入感应器的光照，而间接光照指光线经过多次反射后再传入感应器的关照，这两</description></item><item><title>Unity的Android开发环境配置</title><link>https://blog.zling.site/posts/unity%E7%9A%84android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 02 Apr 2021 14:47:36 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E7%9A%84android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid><description>Android环境配置 添加 Android 开发相关组件 启用 USB 调试 将手机设置为开发者模式，具体机型可能有所不同，但通常都是连续点击设置里的 Build number 多次即可进入开发者模式。</description></item><item><title>Unity中的渲染管线</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/</link><pubDate>Wed, 31 Mar 2021 16:30:07 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/</guid><description>一个渲染管线通过执行一系列操作获取场景中需要展示的内容并将其显示到场景中。这些操作包括： 剔除 渲染 后期处理 Unity提供的渲染管线 内置渲染管线 内置渲染管</description></item><item><title>Unity中的RnderingPath</title><link>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84rnderingpath/</link><pubDate>Sat, 27 Mar 2021 19:06:07 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E4%B8%AD%E7%9A%84rnderingpath/</guid><description>什么是渲染路径 Unity的内置渲染管线支持不同的渲染路径，渲染路径表示了与光照和阴影相关的一系列操作。 何处设置渲染路径 在 Graphics 窗口 Camera 组件 渲染路径的类型 当前</description></item><item><title>Unity的Camera组件</title><link>https://blog.zling.site/posts/unity%E7%9A%84camera%E7%BB%84%E4%BB%B6/</link><pubDate>Sat, 27 Mar 2021 14:04:16 +0800</pubDate><guid>https://blog.zling.site/posts/unity%E7%9A%84camera%E7%BB%84%E4%BB%B6/</guid><description>透视模式和正交模式 Unity的相机存在两种相机投影模式，其中透视模式实现了现实世界的效果，即近大远小的透视效果，反之，无近大远小效果的为正交模式。 可视</description></item></channel></rss>