<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>data save on 泽梅尔的驻留地</title><link>https://www.zling.site/tags/data-save/</link><description>Recent content in data save on 泽梅尔的驻留地</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 06 Sep 2021 18:56:37 +0800</lastBuildDate><atom:link href="https://www.zling.site/tags/data-save/index.xml" rel="self" type="application/rss+xml"/><item><title>Unity中使用Addressable</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E4%BD%BF%E7%94%A8Addressable/</link><pubDate>Mon, 06 Sep 2021 18:56:37 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E4%BD%BF%E7%94%A8Addressable/</guid><description>使用步骤 标记资源为Addressable 方式一：在资源的Inspector界面 方式二：在 Addressables Groups 窗口 构建可寻址内容(Addressable Content) 方式一：使用 Editor 在 Addressables Groups 窗口右上角选择 Build &amp;gt; New Build &amp;gt; Default Build Script. 方式二：使用脚本 API AddressableAssetSettings.BuildPlayerContent() 使用 Addressable 资源 方式一：通过 address 加载或实例化资源 加载资源 Addressables.LoadAssetAsync&amp;lt;GameObject&amp;gt;(&amp;quot;AssetAddress&amp;quot;); 实例化资源 Addressables.InstantiateAsync(&amp;quot;AssetAddress&amp;quot;); 示例： 1 2 3</description></item><item><title>Unity中使用CustomEditor自定义脚本的Inspector面板</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E4%BD%BF%E7%94%A8CustomEditor%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E7%9A%84Inspector%E9%9D%A2%E6%9D%BF/</link><pubDate>Sun, 05 Sep 2021 20:43:12 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E4%BD%BF%E7%94%A8CustomEditor%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E7%9A%84Inspector%E9%9D%A2%E6%9D%BF/</guid><description>自定义脚本 1 2 3 4 5 6 7 8 9 10 using UnityEngine; public class LookAtPoint : MonoBehaviour { public Vector3 lookAtPoint = Vector3.zero; void Update() { transform.LookAt(lookAtPoint); } } 使用 CustomEditor 特性 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 using UnityEngine; using UnityEditor; [CustomEditor(typeof(LookAtPoint))] // 指定为哪个组件自定义编辑器界面 [CanEditMultipleObjects] // 指示Unity可以为多个对象的同一组件同时编辑 public class LookAtPointEditor : Editor { SerializedProperty lookAtPoint;</description></item><item><title>Unity中实现存档的方式</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%AD%98%E6%A1%A3%E7%9A%84%E6%96%B9%E5%BC%8F/</link><pubDate>Sun, 04 Apr 2021 13:23:06 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%AD%98%E6%A1%A3%E7%9A%84%E6%96%B9%E5%BC%8F/</guid><description>PlayerPrefs PlayerPrefs 是 Unity 中用于存储用户数据的类，且只能够存储一些基本类型数据。 存储路径 存储路径取决于所在操作系统。 Windows: 存在注册表的 HKCU\Software\ExampleCompanyName\ExampleProductName Key 下 Windows Store Apps: 存在 %userprofile%\AppData\Local\Packages[ProductPackageId]\LocalState\playerprefs.dat 文件里 macOS: ~/Library/Preferences/com.ExampleCompanyName.ExampleProductName.plist Linux: ~/.config/unity3d/ExampleCompanyName/ExampleProductName 静态方法 方法名 描述 DeleteAll Removes all keys and values from the preferences. Use with caution. DeleteKey Removes the given key from the PlayerPrefs. If the key does not exist, DeleteKey has no impact. GetFloat Returns the value corresponding to key in the preference file if it exists. GetInt Returns the value corresponding to key in the preference file if it exists. GetString</description></item></channel></rss>