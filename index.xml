<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>🦁泽梅尔的驻留地</title><link>https://www.zling.site/</link><description>Recent content on 🦁泽梅尔的驻留地</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy; 2021 &lt;a href="https://www.zling.site/">Zemel Ling&lt;/a> | &lt;a href="https://beian.miit.gov.cn">闽ICP备2021013106号&lt;/a></copyright><lastBuildDate>Sun, 10 Oct 2021 16:17:16 +0800</lastBuildDate><atom:link href="https://www.zling.site/index.xml" rel="self" type="application/rss+xml"/><item><title>洗牌算法</title><link>https://www.zling.site/posts/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 10 Oct 2021 16:17:16 +0800</pubDate><guid>https://www.zling.site/posts/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/</guid><description>暴力洗牌 n个元素共有n!个排列，暴力枚举每种情况，从中获取的一种作为洗牌结果。O(n!)复杂度。 Knuth洗牌算法 public static void Shuffle&amp;lt;T&amp;gt;(IList&amp;lt;T&amp;gt; items) { var rn = new Random((int) DateTime.Now.Ticks); for (var i = items.Count -</description></item><item><title>CSharp查缺补漏20210928</title><link>https://www.zling.site/posts/csharp%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F20210928/</link><pubDate>Tue, 28 Sep 2021 15:52:28 +0800</pubDate><guid>https://www.zling.site/posts/csharp%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F20210928/</guid><description>c# 7.0 特性 数字字面量的改进 数字字面量可以使用下划线来改善可读性、它们称为数字分隔符而被编译器忽略 int million = 1_000_000; var b = 0b1010_1011_1100_1101_1110_1111; // 二进制字面量可以使用0b前缀进行标识 解</description></item><item><title>使用Activator动态创建实例</title><link>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8activator%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B/</link><pubDate>Mon, 27 Sep 2021 11:07:17 +0800</pubDate><guid>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8activator%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B/</guid><description>Activator Activator 包含能够创建本地或远程类型对象或获取对现有远程对象的引用的方法。 重要的方法 CreateInstance 此方法通过调用与给定参数最匹配的类构造函数创建类的实例。默认情况下，如</description></item><item><title>Unity之动态将场景添加到BuildSettings中</title><link>https://www.zling.site/posts/unity%E4%B9%8B%E5%8A%A8%E6%80%81%E5%B0%86%E5%9C%BA%E6%99%AF%E6%B7%BB%E5%8A%A0%E5%88%B0buildsettings%E4%B8%AD/</link><pubDate>Sat, 11 Sep 2021 19:07:09 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B9%8B%E5%8A%A8%E6%80%81%E5%B0%86%E5%9C%BA%E6%99%AF%E6%B7%BB%E5%8A%A0%E5%88%B0buildsettings%E4%B8%AD/</guid><description>代码 #region 将场景添加到 Build Settings // 场景存放目录 var sceneDir = $&amp;quot;{Application.dataPath}/Scenes&amp;quot;; var sceneFiles = Directory.GetFiles(sceneDir, &amp;quot;*.unity&amp;quot;, SearchOption.AllDirectories); var scenes = new EditorBuildSettingsScene[sceneFiles.Length]; for (var i = 0; i &amp;lt; sceneFiles.Length; i++) { // 替换斜杠 var sceneFile = sceneFiles[i].Replace(&amp;quot;\\&amp;quot;, &amp;quot;/&amp;quot;); // 使用相对路径 var assetsFolderIndex = sceneFile.IndexOf(&amp;quot;Assets&amp;quot;, StringComparison.Ordinal); sceneFile = sceneFile.Substring(assetsFolderIndex); var scene = new EditorBuildSettingsScene(sceneFile, true); scenes[i]</description></item><item><title>UGUI之Canvas</title><link>https://www.zling.site/posts/ugui%E4%B9%8Bcanvas/</link><pubDate>Wed, 08 Sep 2021 11:33:00 +0800</pubDate><guid>https://www.zling.site/posts/ugui%E4%B9%8Bcanvas/</guid><description>Canvas Canvas 是UGUI中用于显示其他UI元素的基础，其附加了 Canvas 组件，在场景中可以有多个 Canvas 游戏对象，同时允许 Canvas 嵌套。 Canvas 组件的重要属性 渲染模式 Screen Space - Overlay 此模式下UI</description></item><item><title>Unity中使用Addressable</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E4%BD%BF%E7%94%A8addressable/</link><pubDate>Mon, 06 Sep 2021 18:56:37 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E4%BD%BF%E7%94%A8addressable/</guid><description>使用步骤 标记资源为Addressable 方式一：在资源的Inspector界面 方式二：在 Addressables Groups 窗口 构建可寻址内容(Addressable Content) 方式一：使用 Editor</description></item><item><title>Unity代码修改Prefab未能保存的问题</title><link>https://www.zling.site/posts/unity%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9prefab%E6%9C%AA%E8%83%BD%E4%BF%9D%E5%AD%98%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 06 Sep 2021 15:37:19 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9prefab%E6%9C%AA%E8%83%BD%E4%BF%9D%E5%AD%98%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>解决办法 使用 EditorUtility.SetDirty(thePrefabObjectOrComponent); 将其设置为Dirty，之后就可以保存了。</description></item><item><title>Unity中使用CustomEditor自定义脚本的Inspector面板</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E4%BD%BF%E7%94%A8customeditor%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E7%9A%84inspector%E9%9D%A2%E6%9D%BF/</link><pubDate>Sun, 05 Sep 2021 20:43:12 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E4%BD%BF%E7%94%A8customeditor%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E7%9A%84inspector%E9%9D%A2%E6%9D%BF/</guid><description>自定义脚本 using UnityEngine; public class LookAtPoint : MonoBehaviour { public Vector3 lookAtPoint = Vector3.zero; void Update() { transform.LookAt(lookAtPoint); } } 使用 CustomEditor 特性 using UnityEngine; using UnityEditor; [CustomEditor(typeof(LookAtPoint))] // 指定为哪个组件自定义编辑器界面 [CanEditMultipleObjects] // 指示Unity可以为多个对象的同一组件同时编辑</description></item><item><title>设计模式之工厂方法模式</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 05 Sep 2021 16:09:25 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid><description>工厂方法模式 定义 定义一个可以产生对象的接口，但是让子类决定要产生哪个类的对象。工厂方法模式让类的实例化程序推迟到子类中实现。 UML 实现方式 由子类决定生产哪</description></item><item><title>Unity中的Transform组件</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84transform%E7%BB%84%E4%BB%B6/</link><pubDate>Sun, 05 Sep 2021 11:24:21 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84transform%E7%BB%84%E4%BB%B6/</guid><description>Transform组件 在 Unity 场景中的游戏对象都有 Transform 组件，用于存储和操作对象的位置、旋转和缩放，同时 Transform 支持枚举。 重要的属性 属性 说明 childCount 该transform的</description></item><item><title>Unity的RuntimeInitializeOnLoadMethodAttribute特性</title><link>https://www.zling.site/posts/unity%E7%9A%84runtimeinitializeonloadmethodattribute%E7%89%B9%E6%80%A7/</link><pubDate>Wed, 01 Sep 2021 15:27:16 +0800</pubDate><guid>https://www.zling.site/posts/unity%E7%9A%84runtimeinitializeonloadmethodattribute%E7%89%B9%E6%80%A7/</guid><description>RuntimeInitializeOnLoadMethodAttribute 被标记为 RuntimeInitializeOnLoadMethodAttribute 的方法在游戏加载后就被调用，同时在Awake之后调用。 同时需要注意的是，所有被标记为 RuntimeInitializeOnLoadMethodAttribute 的方法，它们之间被调用的顺序是不一定的。 同时该特性还</description></item><item><title>Unity中使用Null合并操作符和Null条件操作符时的注意事项</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E4%BD%BF%E7%94%A8null%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8Cnull%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link><pubDate>Mon, 30 Aug 2021 08:37:49 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E4%BD%BF%E7%94%A8null%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8Cnull%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid><description>Unity中使用??和?.操作符时的注意事项 不要在继承自 UnityEngine.Object 的对象上使用 这是由于这些操作符并不使用由 UnityEngine.Object 重载的相等操作符，因此有可能导致意外通过 Unity 的生命周</description></item><item><title>Lua学习记录（三）</title><link>https://www.zling.site/posts/lua%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%89/</link><pubDate>Sun, 29 Aug 2021 14:44:11 +0800</pubDate><guid>https://www.zling.site/posts/lua%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%89/</guid><description>位和字节 位运算 运算符 操作 &amp;amp; 按位与 | 按位或 ~ 按位异或 &amp;laquo; 逻辑左移 &amp;raquo; 逻辑右移 ~ 按位取反（一元运算） Lua 中没有提供算术右移和左移，只提供了逻辑的。 无符号整数 Lua 中</description></item><item><title>Lua学习记录（二）</title><link>https://www.zling.site/posts/lua%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%BA%8C/</link><pubDate>Sat, 28 Aug 2021 10:53:56 +0800</pubDate><guid>https://www.zling.site/posts/lua%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%BA%8C/</guid><description>模式匹配 函数 string.find 返回匹配的开始和结束索引 string.match 返回匹配的字符串 string.gsub 返回替换后的字符串和发生替换的次数 string.gmatch 返回函数，此函数可遍历一个字符串中所匹配的所有字串 模式 Lua</description></item><item><title>Lua学习记录（一）</title><link>https://www.zling.site/posts/lua%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%80/</link><pubDate>Wed, 18 Aug 2021 22:20:23 +0800</pubDate><guid>https://www.zling.site/posts/lua%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%80/</guid><description>标识符 由任意字母、数字和下划线组成，同时首字符不能是数字，大小写敏感。 下划线加全大写字母（例如：_VERSION）组成的标识符，通常是特殊标识符（最好</description></item><item><title>将引用的NuGet包dll输出到生成目录</title><link>https://www.zling.site/posts/%E5%B0%86%E5%BC%95%E7%94%A8%E7%9A%84nuget%E5%8C%85dll%E8%BE%93%E5%87%BA%E5%88%B0%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95/</link><pubDate>Tue, 10 Aug 2021 10:58:20 +0800</pubDate><guid>https://www.zling.site/posts/%E5%B0%86%E5%BC%95%E7%94%A8%E7%9A%84nuget%E5%8C%85dll%E8%BE%93%E5%87%BA%E5%88%B0%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95/</guid><description>修改项目文件，在 &amp;lt;PropertyGroup&amp;gt; 处添加如下片段： &amp;lt;CopyLocalLockFileAssemblies&amp;gt;true&amp;lt;/CopyLocalLockFileAssemblies&amp;gt;</description></item><item><title>自建UnityPackageServer</title><link>https://www.zling.site/posts/%E8%87%AA%E5%BB%BAunitypackageserver/</link><pubDate>Tue, 10 Aug 2021 10:04:34 +0800</pubDate><guid>https://www.zling.site/posts/%E8%87%AA%E5%BB%BAunitypackageserver/</guid><description>docker 安装 verdaccio</description></item><item><title>日志依赖注入报错的问题</title><link>https://www.zling.site/posts/%E6%97%A5%E5%BF%97%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 08 Aug 2021 11:57:40 +0800</pubDate><guid>https://www.zling.site/posts/%E6%97%A5%E5%BF%97%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>依赖注入时报如下错误的解决办法 System.InvalidOperationException: Unable to resolve service for type 'Microsoft.Extensions.Logging.ILogger' while attempting to activate 'Some.Class'. 解决办法: 主要是由于构造函数依赖注入时使用了 ILogger 而不是 ILogger&amp;lt;&amp;gt; 导致的，故改为 ILogger&amp;lt;&amp;gt; 即可。</description></item><item><title>Ubuntu使用记录</title><link>https://www.zling.site/posts/ubuntu%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 12 Jul 2021 12:55:26 +0800</pubDate><guid>https://www.zling.site/posts/ubuntu%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid><description>查看硬盘状况 sudo fdisk -l 使用 fdisk 分区 sudo fdisk /dev/sdb 格式化分区 sudo mkfs -t ext4 /dev/sdb1 挂载硬盘 创建挂载点，新建目录 mkdir ~/disk1 挂载 sudo mount /dev/sdb1 ~/disk1 自动挂载 查找硬盘 UUID ls -l /dev/disk/by-uuid/ 修改 /etc/fstab 文件，实现自动挂载 UUID=b543f8f7-579c-45b5-96d6-31de6fa1a55e /home/lgd/disk1</description></item><item><title>MariaDB中文数据问号解决办法</title><link>https://www.zling.site/posts/mariadb%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E9%97%AE%E5%8F%B7%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Fri, 02 Jul 2021 12:51:41 +0800</pubDate><guid>https://www.zling.site/posts/mariadb%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E9%97%AE%E5%8F%B7%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>在/etc/mysql/conf.d文件夹下修改如下文件的内容，若文件不存在的话就新建： server.cnf [mysqld] character-set-server=utf8 collation-server=utf8_general_ci client.cnf [client] default-character-set=utf8 最后重启MariaDB服务</description></item><item><title>CSharp中发送HTTP请求的方法</title><link>https://www.zling.site/posts/csharp%E4%B8%AD%E5%8F%91%E9%80%81http%E8%AF%B7%E6%B1%82%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Fri, 02 Jul 2021 12:49:27 +0800</pubDate><guid>https://www.zling.site/posts/csharp%E4%B8%AD%E5%8F%91%E9%80%81http%E8%AF%B7%E6%B1%82%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>发送 Get 请求 // HttpClient is intended to be instantiated once per application, rather than per-use. See Remarks. static readonly HttpClient client = new HttpClient(); static async Task Main() { // Call asynchronous network methods in a try/catch block to handle exceptions. try { HttpResponseMessage response = await client.GetAsync(&amp;quot;http://www.contoso.com/&amp;quot;); response.EnsureSuccessStatusCode(); string responseBody = await response.Content.ReadAsStringAsync(); // Above three lines can be replaced with new helper method below // string responseBody = await client.GetStringAsync(uri);</description></item><item><title>AspNetCore控制器的Action返回结果类型</title><link>https://www.zling.site/posts/aspnetcore%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84action%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%B1%BB%E5%9E%8B/</link><pubDate>Fri, 02 Jul 2021 12:48:31 +0800</pubDate><guid>https://www.zling.site/posts/aspnetcore%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84action%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%B1%BB%E5%9E%8B/</guid><description>特定类型(Specific type) Action可返回原始类型或复杂类型对象（例如 string 或 自定义类型）。以下代码显示返回自定义的Product类型对象： [HttpGet] public List&amp;lt;Product&amp;gt; Get() =&amp;gt;</description></item><item><title>使用Frp实现内网穿透</title><link>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</link><pubDate>Fri, 02 Jul 2021 12:46:26 +0800</pubDate><guid>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</guid><description>使用 Frp 实现内网穿透 Frp 程序下载 https://github.com/fatedier/frp/releases frp 程序分为服务端和客户端，其中 frps 开头文件为服务端， frpc 开头文件为客户端 配置服务端 编辑 frps.ini 配置服务端 [common] bind_port = 7400 #客户端与服务端通</description></item><item><title>使用acmesh申请LetsEncrypt泛域名证书</title><link>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8acmesh%E7%94%B3%E8%AF%B7letsencrypt%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</link><pubDate>Fri, 02 Jul 2021 12:43:35 +0800</pubDate><guid>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8acmesh%E7%94%B3%E8%AF%B7letsencrypt%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</guid><description>使用 acme.sh 申请 Let&amp;rsquo;s Encrypt 泛域名证书 以下申请证书的过程以 NameSilo ，这个域名服务商为例，其它域名服务商的申请细节请结合以下链接参考： https://github.com/Neilpang/acme.sh/wiki/dnsapi 安装 acme.sh curl https://get.acme.sh | sh 获取域名服务商的api</description></item><item><title>安装Jira使用MariaDB数据库</title><link>https://www.zling.site/posts/%E5%AE%89%E8%A3%85jira%E4%BD%BF%E7%94%A8mariadb%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Fri, 02 Jul 2021 12:40:56 +0800</pubDate><guid>https://www.zling.site/posts/%E5%AE%89%E8%A3%85jira%E4%BD%BF%E7%94%A8mariadb%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>Jira 安装 安装环境及软件 Windows Server 2016 MariaDB 10.3.14 Jira 8.1.0 mysql-connector-java-5.1.47-bin.jar 步骤 安装 MariaDB 将 MariaDB 的 zip 安装包解压到指定目录，例如 C:\Program Files\MariaDB 新建数据库存储文件夹，例如 C:\Program Files\MariaDB\DB 以管理员身份运行 CMD，运行如下命令</description></item><item><title>Artifactory破解安装</title><link>https://www.zling.site/posts/artifactory%E7%A0%B4%E8%A7%A3%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 02 Jul 2021 12:39:58 +0800</pubDate><guid>https://www.zling.site/posts/artifactory%E7%A0%B4%E8%A7%A3%E5%AE%89%E8%A3%85/</guid><description>使用Docker安装Artifactory export JFROG_HOME=&amp;quot;/data/jfrog&amp;quot; mkdir -p $JFROG_HOME/artifactory/var/etc/ cd $JFROG_HOME/artifactory/var/etc/ touch ./system.yaml chown -R $UID:$GID $JFROG_HOME/artifactory/var chmod -R 777 $JFROG_HOME/artifactory/var docker run &amp;ndash;name artifactory &amp;ndash;restart always -v $JFROG_HOME/artifactory/var/:/var/opt/jfrog/artifactory -d -p 8081:8081 -p 8082:8082 releases-docker.jfrog.io/jfrog/artifactory-pro:latest 进入Artifatory容器 下载破解jar并运</description></item><item><title>Unity中游戏对象产生碰撞的条件</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E6%B8%B8%E6%88%8F%E5%AF%B9%E8%B1%A1%E4%BA%A7%E7%94%9F%E7%A2%B0%E6%92%9E%E7%9A%84%E6%9D%A1%E4%BB%B6/</link><pubDate>Tue, 22 Jun 2021 22:29:17 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E6%B8%B8%E6%88%8F%E5%AF%B9%E8%B1%A1%E4%BA%A7%E7%94%9F%E7%A2%B0%E6%92%9E%E7%9A%84%E6%9D%A1%E4%BB%B6/</guid><description>其中至少一个物体（必须运动的）必须带有碰撞器（collider）+刚体(Rigidbody)，另一个物体（可以静止也可以运动）也必须至少带有colli</description></item><item><title>CSharp调用非托管C++时使用回调函数遇到的问题</title><link>https://www.zling.site/posts/csharp%E8%B0%83%E7%94%A8%E9%9D%9E%E6%89%98%E7%AE%A1c++%E6%97%B6%E4%BD%BF%E7%94%A8%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 07 Jun 2021 16:36:57 +0800</pubDate><guid>https://www.zling.site/posts/csharp%E8%B0%83%E7%94%A8%E9%9D%9E%E6%89%98%E7%AE%A1c++%E6%97%B6%E4%BD%BF%E7%94%A8%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>如果该回调函数会被定时调用时，C#代码需要将回调函数对应的委托实例化成一个静态变量后使用，以避免 GC 将委托释放导致的异常问题。 参考：https://st</description></item><item><title>英语中的特殊句式</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%8F%A5%E5%BC%8F/</link><pubDate>Fri, 04 Jun 2021 08:05:06 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%8F%A5%E5%BC%8F/</guid><description>强调句 It is &amp;hellip; that &amp;hellip; I want to go to America this summer. =&amp;gt; It is America that I want to go to this summer. 不能强调动词 / 形容词 倒装句 主谓倒装 全部倒装 谓语动词全在主语前 Here comes the bus. 部分倒装 Only on one occasion have I felt frightened.</description></item><item><title>英语中的非谓语动词</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E9%9D%9E%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D/</link><pubDate>Thu, 03 Jun 2021 09:34:36 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E9%9D%9E%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D/</guid><description>什么是非谓语动词 非谓语动词，又叫非限定动词，非谓语动词是指在句子中不是谓语的动词，主要包括不定式、动名词和分词（现在分词和过去分词），即动词的非谓语形</description></item><item><title>英语中的定语从句</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5/</link><pubDate>Wed, 02 Jun 2021 09:54:12 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5/</guid><description>位置 名词后，修饰限定名词。 写法 关系词做成分。 关系词指代先行词。 先行词 + 关系词 + 陈述句 先行词 关系词 事物 which/that 人 who/whom/that 谁的 whose 时间 when 地点 where 原因 why 限定和非限定 由先行词</description></item><item><title>Unity中的欧拉角和四元数</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E6%AC%A7%E6%8B%89%E8%A7%92%E5%92%8C%E5%9B%9B%E5%85%83%E6%95%B0/</link><pubDate>Tue, 01 Jun 2021 17:18:09 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E6%AC%A7%E6%8B%89%E8%A7%92%E5%92%8C%E5%9B%9B%E5%85%83%E6%95%B0/</guid><description>在 Unity 有两种方式用于表示旋转，欧拉角和四元数。其中欧拉角用于查看和编辑，引擎内部使用四元数来表示。 欧拉角 欧拉角具有三个数字，分别表示绕 x 轴、y 轴和 z 轴旋</description></item><item><title>CSharp中用线程安全的方式引发事件</title><link>https://www.zling.site/posts/csharp%E4%B8%AD%E7%94%A8%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F%E5%BC%95%E5%8F%91%E4%BA%8B%E4%BB%B6/</link><pubDate>Sat, 29 May 2021 23:47:02 +0800</pubDate><guid>https://www.zling.site/posts/csharp%E4%B8%AD%E7%94%A8%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F%E5%BC%95%E5%8F%91%E4%BA%8B%E4%BB%B6/</guid><description>在不考虑线程安全的情况下常常会写如下引发事件的代码: // 版本1 public event EventHandle&amp;lt;EventArgs&amp;gt; Something; protected virtual void OnSomething(EventArgs e) { if(Something != null) Something(this, e); } 以上代码在单线程环境下能够正常运行，但是在多线程环境下就有</description></item><item><title>英语中的名词性从句</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%90%8D%E8%AF%8D%E6%80%A7%E4%BB%8E%E5%8F%A5/</link><pubDate>Tue, 25 May 2021 09:27:39 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%90%8D%E8%AF%8D%E6%80%A7%E4%BB%8E%E5%8F%A5/</guid><description>宾语从句 写法 陈述句变宾语从句 They understand modern art. =&amp;gt; Many people pretend (that) they understand modern art. 直接做从句，不变化，同时可加 that 不做成分。 特殊疑问句变宾语从句 What is a picture &amp;lsquo;about&amp;rsquo;? =&amp;gt; They always tell you what a picture is &amp;lsquo;about&amp;rsquo;. 一般疑</description></item><item><title>Unity中的Tilemap</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84tilemap/</link><pubDate>Tue, 18 May 2021 15:06:16 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84tilemap/</guid><description>用法 导入图片资源，并将其 Texture Type 设置为 (2D Sprite and UI) 创建 Tilemap 打开 TilePalette 窗口，创建 Palette Grid Grid 对象用于对齐瓦片等对象。 TileMap Tile RuleTile RuleTile的Inspection界面存在一个</description></item><item><title>英语中的状语从句</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E7%8A%B6%E8%AF%AD%E4%BB%8E%E5%8F%A5/</link><pubDate>Tue, 18 May 2021 09:55:19 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E7%8A%B6%E8%AF%AD%E4%BB%8E%E5%8F%A5/</guid><description>构成 主句 + 从属连词 + 完整的陈述句 其中 从属连词 不作句子成分。 位置 主句前 or 主句后 主谓之间 种类 状语从句 从属连词 备注 时间状语从句 when, while, as, before, after, since, until, as soon as, &amp;hellip; 地点状语</description></item><item><title>Unity中的Sprites</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84sprites/</link><pubDate>Mon, 17 May 2021 20:32:36 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84sprites/</guid><description>什么是 Sprites Sprites 是 2D 图形对象，在 3D 中本质是标准纹理。 Unity 中的 Sprite 工具 Sprite Creator 用于创建占位用的 Sprite，之后有具体的素材后再替换。 Sprite Editor 用于从一张图片或纹理中切割出</description></item><item><title>英语中的并列句</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%88%97%E5%8F%A5/</link><pubDate>Mon, 17 May 2021 09:48:10 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%88%97%E5%8F%A5/</guid><description>并列连词 顺接 &amp;hellip;and&amp;hellip; &amp;hellip;和&amp;hellip; both&amp;hellip;and&amp;hellip; 两者都 not only&amp;hellip;but&amp;hellip;as well 不但&amp;hellip;而且&amp;hellip; not only&amp;hellip;but also&amp;hellip; &amp;hellip;和&amp;hellip; not only&amp;hellip;but&amp;hellip; &amp;h</description></item><item><title>不会做游戏之2d游戏地图</title><link>https://www.zling.site/posts/%E4%B8%8D%E4%BC%9A%E5%81%9A%E6%B8%B8%E6%88%8F%E4%B9%8B2d%E6%B8%B8%E6%88%8F%E5%9C%B0%E5%9B%BE/</link><pubDate>Sun, 16 May 2021 17:21:16 +0800</pubDate><guid>https://www.zling.site/posts/%E4%B8%8D%E4%BC%9A%E5%81%9A%E6%B8%B8%E6%88%8F%E4%B9%8B2d%E6%B8%B8%E6%88%8F%E5%9C%B0%E5%9B%BE/</guid><description>生成2d地图的方式 整体绘制 瓷砖式拼接（Tilemap） 算法生成 使用 Tilemap 创建 2d 地图</description></item><item><title>英语中的形容词和副词</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%BD%A2%E5%AE%B9%E8%AF%8D%E5%92%8C%E5%89%AF%E8%AF%8D/</link><pubDate>Sun, 16 May 2021 11:24:15 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%BD%A2%E5%AE%B9%E8%AF%8D%E5%92%8C%E5%89%AF%E8%AF%8D/</guid><description>形容词/副词的作用 形容词修饰名词 副词修饰动词、句子、其他形容词或副词。 形容词/副词的三种比较级别 最高级 adj./adv.的最高级 + (介词短语表示范围)</description></item><item><title>不会写游戏文档</title><link>https://www.zling.site/posts/%E4%B8%8D%E4%BC%9A%E5%86%99%E6%B8%B8%E6%88%8F%E6%96%87%E6%A1%A3/</link><pubDate>Fri, 14 May 2021 17:44:14 +0800</pubDate><guid>https://www.zling.site/posts/%E4%B8%8D%E4%BC%9A%E5%86%99%E6%B8%B8%E6%88%8F%E6%96%87%E6%A1%A3/</guid><description>文档的种类 单页说明书 十页说明书 游戏流程表 游戏设计文档 单页说明书 单页说明书是对游戏的一个概括总览。 内容 游戏名称 游戏系统 目标玩家年龄 预计 ESRB 分级 游戏故事概要</description></item><item><title>设计模式之模板方法模式（TemplateMethod）</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8Ftemplatemethod/</link><pubDate>Mon, 10 May 2021 11:36:42 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8Ftemplatemethod/</guid><description>定义 在一个操作方法中定义算法流程，其中某些步骤由子类完成。模板方法模式让子类在不变更原有流程的情况下，还能够重新定义其中的步骤。</description></item><item><title>英语中的介词短语</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E4%BB%8B%E8%AF%8D%E7%9F%AD%E8%AF%AD/</link><pubDate>Mon, 10 May 2021 10:17:52 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E4%BB%8B%E8%AF%8D%E7%9F%AD%E8%AF%AD/</guid><description>形式 prep. + n. / pron. / doing = 介词短语（介宾结构） 时间介词 介词 表达含义 备注 at/on/in 在&amp;hellip;时间点/时间上/时间内 on 常接某一天 before/after 在&amp;hellip;时间之前/之</description></item><item><title>设计模式之策略模式（Strategy）</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8Fstrategy/</link><pubDate>Thu, 06 May 2021 17:06:53 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8Fstrategy/</guid><description>定义 定义一组算法，并封装每个算法，使其可相互替换使用。根据不同的条件选择不同的策略。 有多种方式实现同一个目的（或达到相似的结果）时，</description></item><item><title>算法之排序</title><link>https://www.zling.site/posts/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/</link><pubDate>Thu, 06 May 2021 12:24:35 +0800</pubDate><guid>https://www.zling.site/posts/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/</guid><description>选择排序 算法描述 算法复杂度 c# 代码实现 插入排序 算法描述 算法复杂度 c# 代码实现 希尔排序 算法描述 算法复杂度 c# 代码实现 归并排序 算法描述 将要排序的数组分成两半分别</description></item><item><title>英语中的主宾表语的变化</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E4%B8%BB%E5%AE%BE%E8%A1%A8%E8%AF%AD%E7%9A%84%E5%8F%98%E5%8C%96/</link><pubDate>Wed, 05 May 2021 08:59:49 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E4%B8%BB%E5%AE%BE%E8%A1%A8%E8%AF%AD%E7%9A%84%E5%8F%98%E5%8C%96/</guid><description>由什么充当 名词/代词 非谓语动词 doing 非谓语动词 to do 从句 非谓语动词 doing 作主语（放句首） 作宾语（介词后 及物动词后） to do 作主语 常用：It is + adj. (+ for sb.) + to do sth. It takes (+</description></item><item><title>Protobuf用法记录</title><link>https://www.zling.site/posts/protobuf%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 04 May 2021 16:41:42 +0800</pubDate><guid>https://www.zling.site/posts/protobuf%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description>步骤 安装 Protocol 编译器 下载链接 文件名：protoc-$VERSION-$PLATFORM.zip 根据自己所在的开发环境下载。 或者 安装 Google.Protobuf.Tools NuGet 包 Protocal 运行时安装 安装 Google.Protobuf</description></item><item><title>使用Serilog作为日志系统</title><link>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8serilog%E4%BD%9C%E4%B8%BA%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 03 May 2021 22:21:58 +0800</pubDate><guid>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8serilog%E4%BD%9C%E4%B8%BA%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid><description>使用 简单使用 using System; using Serilog; namespace LogDemo { class Program { static void Main(string[] args) { Log.Logger = new LoggerConfiguration().WriteTo.Console().CreateLogger(); Log.Information(&amp;quot;The global logger has been configured&amp;quot;); } } } 通过设置 Log 类的静态成员 Logger 后，就可以使用 Log 类的静态方法输出日志。 完整用法（包括文件输</description></item><item><title>设计模式之桥接模式（Bridge）</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8Fbridge/</link><pubDate>Sun, 02 May 2021 10:39:22 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8Fbridge/</guid><description>桥接模式 定义 将抽象和实现分离，以达到二者独立进化的目的。 UML 代码 public abstract class Implementor { public abstract void OperatorImp(); } public class ConcreteImplementor1 : Implementor { public override void OperatorImp() { Debug.Log($&amp;quot;执行{nam</description></item><item><title>使用Docker部署Nexus3</title><link>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2nexus3/</link><pubDate>Sat, 01 May 2021 18:35:28 +0800</pubDate><guid>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2nexus3/</guid><description>version: &amp;quot;3.7&amp;quot; services: nexus3: image: sonatype/nexus3 restart: unless-stopped ports: - &amp;quot;8081:8081&amp;quot; volumes: - nexus_data:/nexus-data container_name: nexus3 volumes: nexus_data:</description></item><item><title>设计模式之中介者模式（Mediator）</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8Fmediator/</link><pubDate>Sat, 01 May 2021 12:15:01 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8Fmediator/</guid><description>中介者模式 定义 将子系统间的互动委托给中介者，减少子系统相互调用的耦合，子系统通过中介者交互。 UML 代码 public abstract class Mediator { public abstract void SendMessage(Colleague colleague, string message); } public class ConcreteMediator : Mediator { private ConcreteColleague1 _colleague1 = null; private ConcreteColleague2</description></item><item><title>Debian用法记录</title><link>https://www.zling.site/posts/debian%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Sat, 01 May 2021 10:17:40 +0800</pubDate><guid>https://www.zling.site/posts/debian%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description>关机 1. systemctl poweroff 重启 1. systemctl reboot 设置临时环境变量 export PATH=$PATH:/home/xyz/Tesseract/bintesseract 设置永久环境变量 1. 对所有用户 // 编辑 /etc/profile export PATH=&amp;quot;$PATH:/home/xyz/Tesseract/bin&amp;quot; 2. 对当前用户 // 编辑 ~/.bashrc export PATH=&amp;quot;$PATH:/home/xyz/Tesseract/bin&amp;quot; 最后需要 source ~/.bashrc 查看版本 cat /etc/issue 挂载新硬盘 sudo fdisk -l // 查看</description></item><item><title>Docker常用命令</title><link>https://www.zling.site/posts/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Fri, 30 Apr 2021 17:40:59 +0800</pubDate><guid>https://www.zling.site/posts/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>进入容器 docker exec -it [容器ID] /bin/bash 创建卷 docker volume create my-vol 列出所有卷 docker volume ls 查看卷详情 docker volume inspect my-vol 移除卷 docker volume rm my-vol 修改 Docker 的默认存储路径 sudo docker info sudo nano /etc/docker/daemon.json { &amp;quot;data-root&amp;quot;: &amp;quot;/www/docker&amp;quot; }</description></item><item><title>设置模式之外观模式（Facade）</title><link>https://www.zling.site/posts/%E8%AE%BE%E7%BD%AE%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8Ffacade/</link><pubDate>Thu, 29 Apr 2021 22:20:45 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E7%BD%AE%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8Ffacade/</guid><description>外观模式 定义 为子系统定义一组统一的接口，这个高级的接口会让子系统更容易被使用。 优点 统一接口，避免了客户端与各个子系统间的耦合。 增加了客户端复用的能力。</description></item><item><title>微积分中的极限</title><link>https://www.zling.site/posts/%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%AD%E7%9A%84%E6%9E%81%E9%99%90/</link><pubDate>Thu, 29 Apr 2021 10:58:02 +0800</pubDate><guid>https://www.zling.site/posts/%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%AD%E7%9A%84%E6%9E%81%E9%99%90/</guid><description>基本思想 自变量无限趋近某一值，其对应的因变量也无限趋近某一确定值，要多接近就有多接近。具体到函数 f(x) 就是 x 无限趋近某一值 a，f(x) 也无限趋近某一确定值</description></item><item><title>英语中谓语动词的语态</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E8%AF%AD%E6%80%81/</link><pubDate>Thu, 29 Apr 2021 08:53:32 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E8%AF%AD%E6%80%81/</guid><description>主动语态 不是被动就是主动。 被动语态 及物动词有被动语态。不及物动词需要搭配介词才可以有被动语态。 形式 be + done be 表示被动的时间和人称变化（单复数） done 表示被动</description></item><item><title>英语中谓语动词的情态</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E6%83%85%E6%80%81/</link><pubDate>Wed, 28 Apr 2021 10:58:02 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E6%83%85%E6%80%81/</guid><description>形式 情态动词 + 动词原形 情态动词没有人称变化 情态动词的时态变化有限（现在和过去） 常用的情态动词 现在时 过去时 must * can could will would shall should may might 其中 could、would</description></item><item><title>设计模式之状态模式（State）</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8Fstate/</link><pubDate>Mon, 26 Apr 2021 23:41:37 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8Fstate/</guid><description>定义 让一个对象的行为随着内部状态的变更而改变，而该对象就像是换了类一样。 UML Code using UnityEngine; public class Context { private State _state; public void Request(int value) { _state.Handle(value); } public void SetState(State state) { Debug.Log($&amp;quot;Context.SetState:{state}&amp;quot;); _state = state; } } public abstract class State { protected Context _context; public State(Context</description></item><item><title>Unity中的RuntimeRuntimeInitializeOnLoadMethodAttribute</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84runtimeruntimeinitializeonloadmethodattribute/</link><pubDate>Mon, 26 Apr 2021 22:27:49 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84runtimeruntimeinitializeonloadmethodattribute/</guid><description>被此特性标注的方法将在 Awake 方法之后被 Unity 循环调用，而且被此特性标记的所有方法，它们之间的执行顺序不是固定的。 示例： using UnityEngine; public class MyTest : MonoBehaviour { [RuntimeInitializeOnLoadMethod] static void OnRuntimeMethodLoad() { Debug.Log(&amp;quot;After Scene is loaded and game is</description></item><item><title>CSharp中的二进制序列化</title><link>https://www.zling.site/posts/csharp%E4%B8%AD%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%BA%8F%E5%88%97%E5%8C%96/</link><pubDate>Sun, 25 Apr 2021 13:38:57 +0800</pubDate><guid>https://www.zling.site/posts/csharp%E4%B8%AD%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%BA%8F%E5%88%97%E5%8C%96/</guid><description>备注</description></item><item><title>CSharp中的XML序列化</title><link>https://www.zling.site/posts/csharp%E4%B8%AD%E7%9A%84xml%E5%BA%8F%E5%88%97%E5%8C%96/</link><pubDate>Sat, 24 Apr 2021 22:04:09 +0800</pubDate><guid>https://www.zling.site/posts/csharp%E4%B8%AD%E7%9A%84xml%E5%BA%8F%E5%88%97%E5%8C%96/</guid><description>可 XML 序列化的内容 公有类的公有可读写属性和字段 接口 ICollection 或 IEnumerable 的实现类 XmlElement 对象 XmlNode 对象 DataSet 对象 XML 使用的 Attribute 通常 Xml 元素的名称由类名或成员名称，但是也可以通过 Attribute 去控制。 XmlArrayAttribute</description></item><item><title>设计模式之面向对象的设计原则</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</link><pubDate>Fri, 23 Apr 2021 16:33:55 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</guid><description>单一职责原则 每个类只负责一件事 开闭原则 对扩展开放，对修改关闭。将类中的功能上提抽象为接口，具体的功能实现下放到子类。 里氏替换原则 使用到父类的地方都能够</description></item><item><title>使用Docker运行Consul</title><link>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cconsul/</link><pubDate>Fri, 23 Apr 2021 16:16:07 +0800</pubDate><guid>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cconsul/</guid><description>单节点 开发模式 mkdir -p /data/consul-data mkdir -p /data/consul-conf docker run -d -p 8500:8500 -p 8600:8600/udp -v /data/consul-data:/consul/data -v /data/consul-conf:/consul/config --name=consul_server consul agent -dev -ui -node=consul-server -bootstrap-expect=1 -client=0.0.0.0 -data-dir /consul/data -config-dir /consul/config</description></item><item><title>使用Docker运行Redis</title><link>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Credis/</link><pubDate>Fri, 23 Apr 2021 14:43:14 +0800</pubDate><guid>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Credis/</guid><description>Use Command docker run -d --restart=always --name redis -p 6379:6379 redis --requirepass 123456</description></item><item><title>使用Docker运行MongoDB</title><link>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cmongodb/</link><pubDate>Fri, 23 Apr 2021 12:37:29 +0800</pubDate><guid>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Cmongodb/</guid><description>Use Docker-Compose version: '3.1' services: mongo: image: mongo restart: always environment: MONGO_INITDB_ROOT_USERNAME: root MONGO_INITDB_ROOT_PASSWORD: example volumes: - db_store:/data/db ports: - 27017:27017 volumes: db_store: {}</description></item><item><title>英语中的词组记录</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E8%AF%8D%E7%BB%84%E8%AE%B0%E5%BD%95/</link><pubDate>Fri, 23 Apr 2021 09:56:15 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E8%AF%8D%E7%BB%84%E8%AE%B0%E5%BD%95/</guid><description>set out 出发 be（am/is/are）away 离开 be动词带领的词组通常表示在某种状态,与 leave 的区别是 leave 是瞬间动词，无持续性。be away 表状态，可持续，可与一段</description></item><item><title>英语中谓语动词的时态</title><link>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E6%97%B6%E6%80%81/</link><pubDate>Wed, 21 Apr 2021 10:52:21 +0800</pubDate><guid>https://www.zling.site/posts/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E6%97%B6%E6%80%81/</guid><description>时态的种类 时态 过去 现在 将来 过去将来 一般 * * * * 进行 * * 完成 * * 完成进行 星号表示重点时态 一般过去时 形式：过去式 did 用法：表示过去的事（无关现在） 否定/疑问</description></item><item><title>Unity中的资源系统</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F/</link><pubDate>Thu, 15 Apr 2021 12:15:15 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F/</guid><description>资源 Unity通过将资源的唯一 ID 写入与资源同名的 .meta 文件来确保对资源的唯一引用。 新增的资源 Unity 都会创建与之对应的 .meta 文件 Unity 读取并处理 Assets 文件夹中的任何文件，并</description></item><item><title>Unity中使用ILRuntime进行热更新</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E4%BD%BF%E7%94%A8ilruntime%E8%BF%9B%E8%A1%8C%E7%83%AD%E6%9B%B4%E6%96%B0/</link><pubDate>Thu, 15 Apr 2021 09:43:53 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E4%BD%BF%E7%94%A8ilruntime%E8%BF%9B%E8%A1%8C%E7%83%AD%E6%9B%B4%E6%96%B0/</guid><description/></item><item><title>Unity中事件函数的执行顺序</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</link><pubDate>Wed, 14 Apr 2021 09:37:25 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</guid><description>阶段 主要阶段 初始化阶段，包含 Awake() Start() 物理系统更新阶段，包含 FixedUpdate()、动画更新、OnTriggerXXX、OnCollisionXXX，物</description></item><item><title>设计模式之单例模式</title><link>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Tue, 13 Apr 2021 20:54:49 +0800</pubDate><guid>https://www.zling.site/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>简述 单例模式用于生成特定类在程序的完整生命周期中唯一的实例化对象。 实现方式 方式一 public class Singleton { private static Singleton _instance; public static Singleton Instance { get { if(_instance == null) _instance = new Singleton(); return _instance; } } private Singleton() { //TODO anything } } 懒汉</description></item><item><title>CSharp的Environment类</title><link>https://www.zling.site/posts/csharp%E7%9A%84environment%E7%B1%BB/</link><pubDate>Wed, 07 Apr 2021 18:39:41 +0800</pubDate><guid>https://www.zling.site/posts/csharp%E7%9A%84environment%E7%B1%BB/</guid><description>var ev = Environment.GetEnvironmentVariable(&amp;quot;ev&amp;quot;);</description></item><item><title>CSharp连接MySql数据库的方法</title><link>https://www.zling.site/posts/csharp%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Wed, 07 Apr 2021 14:51:51 +0800</pubDate><guid>https://www.zling.site/posts/csharp%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description/></item><item><title>DataGrip用法记录</title><link>https://www.zling.site/posts/datagrip%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 06 Apr 2021 22:15:52 +0800</pubDate><guid>https://www.zling.site/posts/datagrip%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description/></item><item><title>MySql的用法记录</title><link>https://www.zling.site/posts/mysql%E7%9A%84%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 06 Apr 2021 22:12:49 +0800</pubDate><guid>https://www.zling.site/posts/mysql%E7%9A%84%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description>MySql 中的DataType 类型 含义 范围 数值类型 INT 整数 -2147483647 ~ 2147483647 TINYINT 极小整数 -128 ~ 127 SMALLINT 小整数 -32768 ~ 32767 MEDIUMINT 中等整数 -8388608 ~ 8388607 BIGINT 大整数 -9223372036854775808 ~ 9223372036854775807 FLOAT 单精度浮点数 -3.402823466E+38 ~ -1.175494351E-38 0 1.175494351E-38 ~ 3.402823466E+38 DOUBLE 双精度</description></item><item><title>Rider用法记录</title><link>https://www.zling.site/posts/rider%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 06 Apr 2021 12:31:02 +0800</pubDate><guid>https://www.zling.site/posts/rider%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description>设置Snippet File-&amp;gt;Setting-&amp;gt;Editor-&amp;gt;livetemplates 右上角的按钮从上到下分别是：新建Snippet，复制已有的Snippet，删除Snippet 可通过设置变量（$variablena</description></item><item><title>Unity中引用第三方程序集</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E5%BC%95%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E7%A8%8B%E5%BA%8F%E9%9B%86/</link><pubDate>Mon, 05 Apr 2021 22:32:04 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E5%BC%95%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E7%A8%8B%E5%BA%8F%E9%9B%86/</guid><description>在 Unity 中是通过插件（注意，此处的插件特指预编译的程序集或原生库，与编辑器插件代码区分开）的形式引用第三方程序集或原生库，其中引用的 .NET 程序集称作托管插件，</description></item><item><title>CSharp中的Socket编程</title><link>https://www.zling.site/posts/csharp%E4%B8%AD%E7%9A%84socket%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 05 Apr 2021 18:17:03 +0800</pubDate><guid>https://www.zling.site/posts/csharp%E4%B8%AD%E7%9A%84socket%E7%BC%96%E7%A8%8B/</guid><description/></item><item><title>CSharp中的压缩和解压</title><link>https://www.zling.site/posts/csharp%E4%B8%AD%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B/</link><pubDate>Mon, 05 Apr 2021 17:28:17 +0800</pubDate><guid>https://www.zling.site/posts/csharp%E4%B8%AD%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B/</guid><description>压缩和解压相关类 在 System.IO.Compression 中包含了有关压缩和解压的类： ZipFile ZipArchive ZipArchiveEntry DeflateStream GZipStream 文件的压缩和解压 流的压缩和解压</description></item><item><title>CSharp中序列化数据的方式</title><link>https://www.zling.site/posts/csharp%E4%B8%AD%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E5%BC%8F/</link><pubDate>Mon, 05 Apr 2021 17:23:46 +0800</pubDate><guid>https://www.zling.site/posts/csharp%E4%B8%AD%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E5%BC%8F/</guid><description>二进制序列化 XML 序列化 Json 序列化</description></item><item><title>Unity中的项目设置说明</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E8%AF%B4%E6%98%8E/</link><pubDate>Mon, 05 Apr 2021 14:11:24 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E8%AF%B4%E6%98%8E/</guid><description>项目设置 Edit &amp;gt; Project Settings 此处打开项目设置窗口。 Player Player 界面用于设置最终生成的游戏包相关的设置。多数与具体平台有关。 Android Other Settings Configuration API Compatibility Level .Net Standard 2.0 兼容 .NET Standard 2.0。生成较小的构</description></item><item><title>Unity中的特殊文件夹和脚本编译顺序</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E8%84%9A%E6%9C%AC%E7%BC%96%E8%AF%91%E9%A1%BA%E5%BA%8F/</link><pubDate>Mon, 05 Apr 2021 13:24:47 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E8%84%9A%E6%9C%AC%E7%BC%96%E8%AF%91%E9%A1%BA%E5%BA%8F/</guid><description>特殊文件夹 Assets Assets 文件夹是包含 Unity 项目使用的资源的主文件夹。Editor 中的 Project 窗口的内容直接对应于 Assets 文件夹的内容。大多数 API 函数都假定所有内容都位于 Assets 文件夹中</description></item><item><title>Unity中的程序集定义</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%AE%9A%E4%B9%89/</link><pubDate>Mon, 05 Apr 2021 13:15:45 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%AE%9A%E4%B9%89/</guid><description>程序集定义（Assembly Definitions） Unity 使用程序集定义和程序集引用（Assembly References）组织代码结构，同时 Unity 默认使用预</description></item><item><title>CSharp中生成随机数据的方式</title><link>https://www.zling.site/posts/csharp%E4%B8%AD%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E5%BC%8F/</link><pubDate>Mon, 05 Apr 2021 11:28:46 +0800</pubDate><guid>https://www.zling.site/posts/csharp%E4%B8%AD%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E5%BC%8F/</guid><description>Test</description></item><item><title>使用Excel生成xml</title><link>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8excel%E7%94%9F%E6%88%90xml/</link><pubDate>Sun, 04 Apr 2021 22:45:07 +0800</pubDate><guid>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8excel%E7%94%9F%E6%88%90xml/</guid><description>制作 XML 模板 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;root&amp;gt; &amp;lt;item ID=&amp;quot;&amp;quot;&amp;gt; &amp;lt;surname&amp;gt;&amp;lt;/surname&amp;gt; &amp;lt;man&amp;gt;&amp;lt;/man&amp;gt; &amp;lt;woman&amp;gt;&amp;lt;/woman&amp;gt; &amp;lt;/item&amp;gt; &amp;lt;item ID=&amp;quot;&amp;quot;&amp;gt; &amp;lt;surname&amp;gt;&amp;lt;/surname&amp;gt; &amp;lt;man&amp;gt;&amp;lt;/man&amp;gt; &amp;lt;woman&amp;gt;&amp;lt;/woman&amp;gt; &amp;lt;/item&amp;gt; &amp;lt;/root&amp;gt; 在 Excel 选项中启用开发工具 Excel 映射 XML 模板 然后映射元素，填充数据 使用开发工具的 XML 导出，即可生成 XML 文件</description></item><item><title>Unity中获取对象的方法</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Sun, 04 Apr 2021 17:39:33 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>直接关联 在脚本中创建public的想要关联的游戏对象类型的变量，随后在inspector中关联对应的游戏对象即可 public class Enemy : MonoBehaviour { public GameObject player; // 其他变量和函数..</description></item><item><title>Unity中的资源加载</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/</link><pubDate>Sun, 04 Apr 2021 16:18:57 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/</guid><description>加载方式 将 Prefab 拖拽到 Inspector 的脚本上 这是最简单的方式，但是在实际项目中通常不使用，因为这种方式不够灵活，拖拽的方式低效，存在大量的隐式耦合。 public class Test : MonoBehaviour { public GameObject prefab;</description></item><item><title>Unity中的场景</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E5%9C%BA%E6%99%AF/</link><pubDate>Sun, 04 Apr 2021 16:18:51 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E5%9C%BA%E6%99%AF/</guid><description>Scene 场景是 Unity 中由于放置游戏对象和UI元素的资源文件。 创建场景 使用新建场景对话框（ New Scene Dialog）根据指定的场景模板创建场景。 使用菜单或项目窗口根据项目</description></item><item><title>Unity中实现存档的方式</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%AD%98%E6%A1%A3%E7%9A%84%E6%96%B9%E5%BC%8F/</link><pubDate>Sun, 04 Apr 2021 13:23:06 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%AD%98%E6%A1%A3%E7%9A%84%E6%96%B9%E5%BC%8F/</guid><description>PlayerPrefs PlayerPrefs 是 Unity 中用于存储用户数据的类，且只能够存储一些基本类型数据。 存储路径 存储路径取决于所在操作系统。 Windows: 存在注册表的 HKCU\Software\ExampleCompanyName\ExampleProductName Key 下 Windows Store Apps: 存在 %userprofile%\AppData\Local\Packages[ProductPackageId]\LocalState\playerprefs.dat 文件里 macOS: ~/Library/Preferences/com.ExampleCompanyName.ExampleProductName.plist Linux: ~/.config/unity3d/ExampleCompanyName/ExampleProductName 静态方</description></item><item><title>Unity中UGUI的自适应</title><link>https://www.zling.site/posts/unity%E4%B8%ADugui%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94/</link><pubDate>Sat, 03 Apr 2021 14:35:22 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%ADugui%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94/</guid><description>设置 Canvas 的缩放模式为 Match Width Or Height 设置 Canvas 的 Match 为 Height（如果为横板游戏的话） 然后设置 UI 组件的锚点</description></item><item><title>Unity中的光照</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E5%85%89%E7%85%A7/</link><pubDate>Fri, 02 Apr 2021 16:11:55 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E5%85%89%E7%85%A7/</guid><description>Unity中的光照类型 直接光照和间接光照 直接光照指照射到物体表面只反射一次后就传入感应器的光照，而间接光照指光线经过多次反射后再传入感应器的关照，这两</description></item><item><title>Unity的Android开发环境配置</title><link>https://www.zling.site/posts/unity%E7%9A%84android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 02 Apr 2021 14:47:36 +0800</pubDate><guid>https://www.zling.site/posts/unity%E7%9A%84android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid><description>Android环境配置 添加 Android 开发相关组件 启用 USB 调试 将手机设置为开发者模式，具体机型可能有所不同，但通常都是连续点击设置里的 Build number 多次即可进入开发者模式。</description></item><item><title>Unity中的渲染管线</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/</link><pubDate>Wed, 31 Mar 2021 16:30:07 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/</guid><description>一个渲染管线通过执行一系列操作获取场景中需要展示的内容并将其显示到场景中。这些操作包括： 剔除 渲染 后期处理 Unity提供的渲染管线 内置渲染管线 内置渲染管</description></item><item><title>Unity中的RnderingPath</title><link>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84rnderingpath/</link><pubDate>Sat, 27 Mar 2021 19:06:07 +0800</pubDate><guid>https://www.zling.site/posts/unity%E4%B8%AD%E7%9A%84rnderingpath/</guid><description>什么是渲染路径 Unity的内置渲染管线支持不同的渲染路径，渲染路径表示了与光照和阴影相关的一系列操作。 何处设置渲染路径 在 Graphics 窗口 Camera 组件 渲染路径的类型 当前</description></item><item><title>Unity的Camera组件</title><link>https://www.zling.site/posts/unity%E7%9A%84camera%E7%BB%84%E4%BB%B6/</link><pubDate>Sat, 27 Mar 2021 14:04:16 +0800</pubDate><guid>https://www.zling.site/posts/unity%E7%9A%84camera%E7%BB%84%E4%BB%B6/</guid><description>透视模式和正交模式 Unity的相机存在两种相机投影模式，其中透视模式实现了现实世界的效果，即近大远小的透视效果，反之，无近大远小效果的为正交模式。 可视</description></item><item><title>AspNetCore学习记录(1)</title><link>https://www.zling.site/posts/aspnetcore%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</link><pubDate>Fri, 26 Mar 2021 22:19:59 +0800</pubDate><guid>https://www.zling.site/posts/aspnetcore%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</guid><description>配置MVC 修改Startup文件成如下所示： using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.AspNetCore.Http; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; namespace MockSchool { public class Startup { public void ConfigureServices(IServiceCollection services) { // 设置 EnableEndpointRouting 为 false 是为了使用 MVC 默认路由 //services.AddMvc(a =&amp;gt; a.EnableEndpointRouting = false); // 使用 AddControllersWithViews 而不使用 AddMvc 是</description></item><item><title>Markdown语法</title><link>https://www.zling.site/posts/markdown%E8%AF%AD%E6%B3%95/</link><pubDate>Fri, 26 Mar 2021 10:16:51 +0800</pubDate><guid>https://www.zling.site/posts/markdown%E8%AF%AD%E6%B3%95/</guid><description>标题（Headings） 要创建标题，请在单词或短语前面添加井号 (#) 。井号的数量代表了标题的级别。例如，添加三个井号即创建一个三级标题 ### My Header My Header 段落 在每行</description></item><item><title>子弹笔记</title><link>https://www.zling.site/posts/%E5%AD%90%E5%BC%B9%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 25 Mar 2021 15:00:02 +0800</pubDate><guid>https://www.zling.site/posts/%E5%AD%90%E5%BC%B9%E7%AC%94%E8%AE%B0/</guid><description>子弹笔记</description></item><item><title>使用Docker部署Trilium</title><link>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2trilium/</link><pubDate>Thu, 25 Mar 2021 13:26:38 +0800</pubDate><guid>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2trilium/</guid><description>docker-compose version: &amp;quot;3.7&amp;quot; services: trilium: image: zadam/trilium restart: unless-stopped ports: - &amp;quot;8080:8080&amp;quot; volumes: - /data/trilium/data:/home/node/trilium-data docker-compose up -d 遇到容器里的权限问题 internal/fs/utils.js:269 throw err; ^ Error: EACCES: permission denied, mkdir '/home/node/trilium-data/log' at Object.mkdirSync (fs.js:921:3) at Object.&amp;lt;anonymous&amp;gt; (/usr/src/app/src/services/log.js:7:8) at Module._compile (internal/modules/cjs/loader.js:1015:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1035:10) at Module.load (internal/modules/cjs/loader.js:879:32) at Function.Module._load (internal/modules/cjs/loader.js:724:14) at Module.require (internal/modules/cjs/loader.js:903:19) at require (internal/modules/cjs/helpers.js:74:18) at Object.&amp;lt;anonymous&amp;gt; (/usr/src/app/src/app.js:1:13) at Module._compile (internal/modules/cjs/loader.js:1015:30) { errno: -13, syscall: 'mkdir', code: 'EACCES',</description></item><item><title>使用Docker部署Caddy</title><link>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2caddy/</link><pubDate>Wed, 24 Mar 2021 18:32:49 +0800</pubDate><guid>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2caddy/</guid><description>docker-compose.yml version: &amp;quot;3.7&amp;quot; services: caddy: image: caddy restart: unless-stopped ports: - &amp;quot;80:80&amp;quot; - &amp;quot;443:443&amp;quot; volumes: - /data/caddy/Caddyfile:/etc/caddy/Caddyfile - /data/caddy/site:/srv - caddy_data:/data - caddy_config:/config container_name: caddy volumes: caddy_data: caddy_config: docker-compose up -d 注意一点 /data/caddy/Caddyfile 需要提前创建好 Caddyfile Caddy有两种配置格式：1. json 2. Caddyfile，由于Ca</description></item><item><title>使用hugo搭建静态博客</title><link>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link><pubDate>Tue, 23 Mar 2021 22:36:20 +0800</pubDate><guid>https://www.zling.site/posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid><description>安装Go Go安装地址，下载相应版本的Go安装器，按步骤安装即可。 安装Hugo 去Hugo的Github上下载，hugo_extended版的压缩包，然后</description></item></channel></rss>