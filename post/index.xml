<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 泽梅尔的驻留地</title><link>https://www.zling.site/post/</link><description>Recent content in Posts on 泽梅尔的驻留地</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 05 Dec 2021 18:09:04 +0800</lastBuildDate><atom:link href="https://www.zling.site/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Lua编码规范</title><link>https://www.zling.site/post/lua%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</link><pubDate>Sun, 05 Dec 2021 18:09:04 +0800</pubDate><guid>https://www.zling.site/post/lua%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</guid><description>转载自 lua 编码规范-abaojin 目的 统一编码标准，提高开发效率。 便于代码阅读，降低维护成本。 编码规范 命名惯例 所有lua文件命名时使用小写字母、下划线。 类名、变量名尽可能使用有意义的英文，类名使用帕斯卡命名法，变量名使用骆驼式命名法。 常量、消息号定义时用大写，单词间 _ 分割 eg:KI</description></item><item><title>游戏服务器资源大全</title><link>https://www.zling.site/post/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E5%A4%A7%E5%85%A8/</link><pubDate>Sun, 28 Nov 2021 12:31:43 +0800</pubDate><guid>https://www.zling.site/post/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E5%A4%A7%E5%85%A8/</guid><description>游戏服务器资源大全 目录 游戏服务器资源大全 网络 协议 持久化 Log 游戏AI 工具库 开源服务器 运维 学习资源 其他 网络 网络相关的库和工具 Java Netty - Netty是一个高性能、异步事件驱动的NIO框架，它提供了对TCP、UDP和文件传输的支持 Mina - Apache Mina是一个能够帮助用户开发高性能和高伸缩性网络应用程序的</description></item><item><title>Unity资源常用目录和路径大总结</title><link>https://www.zling.site/post/Unity%E8%B5%84%E6%BA%90%E5%B8%B8%E7%94%A8%E7%9B%AE%E5%BD%95%E5%92%8C%E8%B7%AF%E5%BE%84%E5%A4%A7%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 27 Nov 2021 19:42:30 +0800</pubDate><guid>https://www.zling.site/post/Unity%E8%B5%84%E6%BA%90%E5%B8%B8%E7%94%A8%E7%9B%AE%E5%BD%95%E5%92%8C%E8%B7%AF%E5%BE%84%E5%A4%A7%E6%80%BB%E7%BB%93/</guid><description>转载自：Unity资源常用目录和路径大总结 参考1：unity不同平台下的路径和读写权限 参考2：#你好Unity3D#手机上的路径（来自我的长微博） 参考3：Unity3D研究院之Android同步方法读取streamingAssets（八十八） 一、资源路径 字段 说明 Application.dataPath 包含游戏在目标平</description></item><item><title>ToLua项目配置</title><link>https://www.zling.site/post/ToLua%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 31 Oct 2021 09:39:02 +0800</pubDate><guid>https://www.zling.site/post/ToLua%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</guid><description>将 ToLua 下的 Assets 和 Luac53 文件夹复制到自己的工程 前往 https://github.com/topameng/tolua_runtime 将Plugins53文件夹里面的所有tolua相关的runtime底层库，都拷贝覆盖到unity工程的Plugins目录下。 打开unity编辑器，添加“LUAC_5_3”宏，回车等待编辑器编译完毕既是Lua5.3的虚拟机环境。 注意要用lu</description></item><item><title>Lua名词解释</title><link>https://www.zling.site/post/Lua%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/</link><pubDate>Sun, 31 Oct 2021 08:52:28 +0800</pubDate><guid>https://www.zling.site/post/Lua%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/</guid><description>Lua lua其实就是为了嵌入其它应用程序而开发的一个脚本语言， lua优势 1）lua是一个免费、小巧、简单、强大、高效、轻量级的嵌入式的脚本语言 2）它是用C语言开发的项目，所以可以在大部分的操作系统上运行 3）lua是目前速度最快的脚本语言，既可以提升语言的灵活性还可以最大限度的保留速度</description></item><item><title>Ubuntu中配置SVN服务器</title><link>https://www.zling.site/post/Ubuntu%E4%B8%AD%E9%85%8D%E7%BD%AESVN%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Thu, 28 Oct 2021 21:42:14 +0800</pubDate><guid>https://www.zling.site/post/Ubuntu%E4%B8%AD%E9%85%8D%E7%BD%AESVN%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>安装SVN服务器及创建仓库 1 2 sudo apt-get install subversion svnadmin create /home/pi/MY_SVN_REPOS SVN配置文件修改，进入到新建仓库下conf文件夹中，我们需要配置修改svnserve.conf、passwd以及authz三个文件。 1 2 3 pi@raspberrypi:~$ cd /home/pi/MY_SVN_REPOS/conf/ pi@raspberrypi:~/MY_SVN_REPOS/conf$ ls authz hooks-env.tmpl passwd svnserve.conf svnserve.conf文件修改，主要将一下三点前的#号去掉即可 1 2 3 4 5 6</description></item><item><title>Unity中的UGUI</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84UGUI/</link><pubDate>Wed, 27 Oct 2021 19:26:14 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84UGUI/</guid><description>基本组件 Text 需要使用TTF字体，RaycastTarget选项决定组件是否响应点击事件。可使用 Outline 和 Shadow 组件为文本描边和添加阴影。描边的效率低于阴影。 Image 图片类型（Image Type）分为四种： Simple 直接显示图片 Sliced 通过九宫格方式显示图片，可用 SpriteEditor 来编辑九宫格的区域 Tiled 平铺图片 Filled 像技能CD一样，可</description></item><item><title>Unity中的IMGUI</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84IMGUI/</link><pubDate>Mon, 25 Oct 2021 11:18:17 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84IMGUI/</guid><description>什么是 IMGUI 即时模式 GUI 系统（也称为 IMGUI）是一个完全独立的功能系统，不同于 Unity 基于游戏对象的主 UI 系统，IMGUI 需在实现脚本上调用 OnGUI 函数，并在其中实现绘制 UI 的代码。 IMGUI 作用 创建游戏内调试显示和工具。 为脚本组件创建自定义检视面板。 创建新的编辑器窗口和工具以扩展 Unity 本身。 控件 Label Button RepeatButton TextField TextArea Toggle ToolBar</description></item><item><title>CSharp查缺补漏之重写(override)和覆盖(new)的区别</title><link>https://www.zling.site/post/CSharp%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F%E4%B9%8B%E9%87%8D%E5%86%99%E5%92%8C%E8%A6%86%E7%9B%96%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Mon, 25 Oct 2021 09:54:30 +0800</pubDate><guid>https://www.zling.site/post/CSharp%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F%E4%B9%8B%E9%87%8D%E5%86%99%E5%92%8C%E8%A6%86%E7%9B%96%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>不管是重写还是覆盖都不会影响父类自身的功能（废话，肯定的嘛，除非代码被改）。 当用子类创建父类的时候，如 C1 c3 = new C2()，重写会改变父类的功能，即调用子类的功能；而覆盖不会，仍然调用父类功能。 虚方法、实方法都可以被覆盖（new），抽象方法，接口 不可以。 抽象方法，接口，标记为virt</description></item><item><title>洗牌算法</title><link>https://www.zling.site/post/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 10 Oct 2021 16:17:16 +0800</pubDate><guid>https://www.zling.site/post/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/</guid><description>暴力洗牌 n个元素共有n!个排列，暴力枚举每种情况，从中获取的一种作为洗牌结果。O(n!)复杂度。 Knuth洗牌算法 1 2 3 4 5 6 7 8 public static void Shuffle&amp;lt;T&amp;gt;(IList&amp;lt;T&amp;gt; items) { var rn = new Random((int) DateTime.Now.Ticks); for (var i = items.Count - 1; i &amp;gt;= 0; i--) { Swap(items, i, rn.Next(i + 1)); } }</description></item><item><title>CSharp查缺补漏20210928</title><link>https://www.zling.site/post/CSharp%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F20210928/</link><pubDate>Tue, 28 Sep 2021 15:52:28 +0800</pubDate><guid>https://www.zling.site/post/CSharp%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F20210928/</guid><description>c# 7.0 特性 数字字面量的改进 数字字面量可以使用下划线来改善可读性、它们称为数字分隔符而被编译器忽略 1 2 3 int million = 1_000_000; var b = 0b1010_1011_1100_1101_1110_1111; // 二进制字面量可以使用0b前缀进行标识 解构器 解构方法的名字必须为Deconstruct，并且拥有一个或多个out参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Rectangle { public readonly float Width, Height; public</description></item><item><title>使用Activator动态创建实例</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Activator%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B/</link><pubDate>Mon, 27 Sep 2021 11:07:17 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Activator%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B/</guid><description>Activator Activator 包含能够创建本地或远程类型对象或获取对现有远程对象的引用的方法。 重要的方法 CreateInstance 此方法通过调用与给定参数最匹配的类构造函数创建类的实例。默认情况下，如果被创建实例的类没有Public的构造函数或找不到匹配的构造函数，此方法将抛出异常。</description></item><item><title>Unity之动态将场景添加到BuildSettings中</title><link>https://www.zling.site/post/Unity%E4%B9%8B%E5%8A%A8%E6%80%81%E5%B0%86%E5%9C%BA%E6%99%AF%E6%B7%BB%E5%8A%A0%E5%88%B0BuildSettings%E4%B8%AD/</link><pubDate>Sat, 11 Sep 2021 19:07:09 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B9%8B%E5%8A%A8%E6%80%81%E5%B0%86%E5%9C%BA%E6%99%AF%E6%B7%BB%E5%8A%A0%E5%88%B0BuildSettings%E4%B8%AD/</guid><description>代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #region 将场景添加到 Build Settings // 场景存放目录 var sceneDir = $&amp;#34;{Application.dataPath}/Scenes&amp;#34;; var sceneFiles = Directory.GetFiles(sceneDir, &amp;#34;*.unity&amp;#34;, SearchOption.AllDirectories); var scenes = new EditorBuildSettingsScene[sceneFiles.Length]; for (var i = 0; i &amp;lt; sceneFiles.Length; i++) { // 替换斜杠 var sceneFile = sceneFiles[i].Replace(&amp;#34;\\&amp;#34;, &amp;#34;/&amp;#34;); // 使用相对路径 var assetsFolderIndex = sceneFile.IndexOf(&amp;#34;Assets&amp;#34;, StringComparison.Ordinal); sceneFile = sceneFile.Substring(assetsFolderIndex); var scene = new EditorBuildSettingsScene(sceneFile, true); scenes[i] = scene; } EditorBuildSettings.scenes = scenes; #endregion</description></item><item><title>Unity中使用Addressable</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E4%BD%BF%E7%94%A8Addressable/</link><pubDate>Mon, 06 Sep 2021 18:56:37 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E4%BD%BF%E7%94%A8Addressable/</guid><description>使用步骤 标记资源为Addressable 方式一：在资源的Inspector界面 方式二：在 Addressables Groups 窗口 构建可寻址内容(Addressable Content) 方式一：使用 Editor 在 Addressables Groups 窗口右上角选择 Build &amp;gt; New Build &amp;gt; Default Build Script. 方式二：使用脚本 API AddressableAssetSettings.BuildPlayerContent() 使用 Addressable 资源 方式一：通过 address 加载或实例化资源 加载资源 Addressables.LoadAssetAsync&amp;lt;GameObject&amp;gt;(&amp;quot;AssetAddress&amp;quot;); 实例化资源 Addressables.InstantiateAsync(&amp;quot;AssetAddress&amp;quot;); 示例： 1 2 3</description></item><item><title>Unity代码修改Prefab未能保存的问题</title><link>https://www.zling.site/post/Unity%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9Prefab%E6%9C%AA%E8%83%BD%E4%BF%9D%E5%AD%98%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 06 Sep 2021 15:37:19 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9Prefab%E6%9C%AA%E8%83%BD%E4%BF%9D%E5%AD%98%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>解决办法 使用 EditorUtility.SetDirty(thePrefabObjectOrComponent); 将其设置为Dirty，之后就可以保存了。</description></item><item><title>Unity中使用CustomEditor自定义脚本的Inspector面板</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E4%BD%BF%E7%94%A8CustomEditor%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E7%9A%84Inspector%E9%9D%A2%E6%9D%BF/</link><pubDate>Sun, 05 Sep 2021 20:43:12 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E4%BD%BF%E7%94%A8CustomEditor%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E7%9A%84Inspector%E9%9D%A2%E6%9D%BF/</guid><description>自定义脚本 1 2 3 4 5 6 7 8 9 10 using UnityEngine; public class LookAtPoint : MonoBehaviour { public Vector3 lookAtPoint = Vector3.zero; void Update() { transform.LookAt(lookAtPoint); } } 使用 CustomEditor 特性 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 using UnityEngine; using UnityEditor; [CustomEditor(typeof(LookAtPoint))] // 指定为哪个组件自定义编辑器界面 [CanEditMultipleObjects] // 指示Unity可以为多个对象的同一组件同时编辑 public class LookAtPointEditor : Editor { SerializedProperty lookAtPoint;</description></item><item><title>设计模式之工厂方法模式</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 05 Sep 2021 16:09:25 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid><description>工厂方法模式 定义 定义一个可以产生对象的接口，但是让子类决定要产生哪个类的对象。工厂方法模式让类的实例化程序推迟到子类中实现。 UML 实现方式 由子类决定生产哪个类的对象 在工厂方法中增加参数，由参数决定生产哪个类对象 使用泛型类 使用泛型工厂方法 注意</description></item><item><title>Unity中的Transform组件</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84Transform%E7%BB%84%E4%BB%B6/</link><pubDate>Sun, 05 Sep 2021 11:24:21 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84Transform%E7%BB%84%E4%BB%B6/</guid><description>Transform组件 在 Unity 场景中的游戏对象都有 Transform 组件，用于存储和操作对象的位置、旋转和缩放，同时 Transform 支持枚举。 重要的属性 属性 说明 childCount 该transform的直接孩子个数 forward 返回归一化向量，该向量在世界空间中为蓝色轴表示 right 红色轴 up 绿色轴 重要的方法 方法 说明 DetachChildren 将当前 Transform 下的孩子与其脱钩 Find 根据给定</description></item><item><title>Unity的RuntimeInitializeOnLoadMethodAttribute特性</title><link>https://www.zling.site/post/Unity%E7%9A%84RuntimeInitializeOnLoadMethodAttribute%E7%89%B9%E6%80%A7/</link><pubDate>Wed, 01 Sep 2021 15:27:16 +0800</pubDate><guid>https://www.zling.site/post/Unity%E7%9A%84RuntimeInitializeOnLoadMethodAttribute%E7%89%B9%E6%80%A7/</guid><description>RuntimeInitializeOnLoadMethodAttribute 被标记为 RuntimeInitializeOnLoadMethodAttribute 的方法在游戏加载后就被调用，同时在Awake之后调用。 同时需要注意的是，所有被标记为 RuntimeInitializeOnLoadMethodAttribute 的方法，它们之间被调用的顺序是不一定的。 同时该特性还拥有可选参数 loadType，该参数决定了被标记的方法是在场景加载前还是加载后被调用。</description></item><item><title>Unity中使用Null合并操作符和Null条件操作符时的注意事项</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E4%BD%BF%E7%94%A8Null%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8CNull%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link><pubDate>Mon, 30 Aug 2021 08:37:49 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E4%BD%BF%E7%94%A8Null%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8CNull%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid><description>Unity中使用??和?.操作符时的注意事项 不要在继承自 UnityEngine.Object 的对象上使用 这是由于这些操作符并不使用由 UnityEngine.Object 重载的相等操作符，因此有可能导致意外通过 Unity 的生命周期检查。这种情况下最好使用显示Null判断或调用 System.Object.ReferenceEquals 函数。 具体可参考JetBrains提供的这篇文章 &amp;ldquo;Possible unintended bypass of lifetime check of underlying Unity engine object&amp;rdquo;</description></item><item><title>Lua学习记录（三）</title><link>https://www.zling.site/post/Lua%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%89/</link><pubDate>Sun, 29 Aug 2021 14:44:11 +0800</pubDate><guid>https://www.zling.site/post/Lua%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%89/</guid><description>位和字节 位运算 运算符 操作 &amp;amp; 按位与 | 按位或 ~ 按位异或 &amp;laquo; 逻辑左移 &amp;raquo; 逻辑右移 ~ 按位取反（一元运算） Lua 中没有提供算术右移和左移，只提供了逻辑的。 无符号整数 Lua 中使用 math.ult 函数比较两个无符号整数的大小。 打包和解包二进制数据 string.pack 函数会把值打包成二进制数据 string.unpack 则反之 string.pack 和 string.unpack 的第一个参数是格式化字符串，函数</description></item><item><title>Lua学习记录（二）</title><link>https://www.zling.site/post/Lua%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%BA%8C/</link><pubDate>Sat, 28 Aug 2021 10:53:56 +0800</pubDate><guid>https://www.zling.site/post/Lua%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%BA%8C/</guid><description>模式匹配 函数 string.find 返回匹配的开始和结束索引 string.match 返回匹配的字符串 string.gsub 返回替换后的字符串和发生替换的次数 string.gmatch 返回函数，此函数可遍历一个字符串中所匹配的所有字串 模式 Lua 中模式使用百分号做转义字符。 字符分类 含义 . 任意字符 %a 任意字母 %c 控制字符 %d 数字 %g 除空格外的可打印字符 %l 小写字母 %p 标点符号 %s 空白字符 %u</description></item><item><title>Lua学习记录（一）</title><link>https://www.zling.site/post/Lua%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%80/</link><pubDate>Wed, 18 Aug 2021 22:20:23 +0800</pubDate><guid>https://www.zling.site/post/Lua%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%80/</guid><description>标识符 由任意字母、数字和下划线组成，同时首字符不能是数字，大小写敏感。 下划线加全大写字母（例如：_VERSION）组成的标识符，通常是特殊标识符（最好不要定义相同的标识符）。 一下是 lua 保留字 1 and break do else elseif end false goto for function if in local nil not or repeat return then true until while 注释 以下为单行注释 1 -- 单行注释 以下是多行注释 1</description></item><item><title>将引用的NuGet包dll输出到生成目录</title><link>https://www.zling.site/post/%E5%B0%86%E5%BC%95%E7%94%A8%E7%9A%84NuGet%E5%8C%85dll%E8%BE%93%E5%87%BA%E5%88%B0%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95/</link><pubDate>Tue, 10 Aug 2021 10:58:20 +0800</pubDate><guid>https://www.zling.site/post/%E5%B0%86%E5%BC%95%E7%94%A8%E7%9A%84NuGet%E5%8C%85dll%E8%BE%93%E5%87%BA%E5%88%B0%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95/</guid><description>修改项目文件，在 &amp;lt;PropertyGroup&amp;gt; 处添加如下片段： &amp;lt;CopyLocalLockFileAssemblies&amp;gt;true&amp;lt;/CopyLocalLockFileAssemblies&amp;gt;</description></item><item><title>日志依赖注入报错的问题</title><link>https://www.zling.site/post/%E6%97%A5%E5%BF%97%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 08 Aug 2021 11:57:40 +0800</pubDate><guid>https://www.zling.site/post/%E6%97%A5%E5%BF%97%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>依赖注入时报如下错误的解决办法 1 System.InvalidOperationException: Unable to resolve service for type &amp;#39;Microsoft.Extensions.Logging.ILogger&amp;#39; while attempting to activate &amp;#39;Some.Class&amp;#39;. 解决办法: 主要是由于构造函数依赖注入时使用了 ILogger 而不是 ILogger&amp;lt;&amp;gt; 导致的，故改为 ILogger&amp;lt;&amp;gt; 即可。</description></item><item><title>Ubuntu使用记录</title><link>https://www.zling.site/post/Ubuntu%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 12 Jul 2021 12:55:26 +0800</pubDate><guid>https://www.zling.site/post/Ubuntu%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid><description>查看硬盘状况 sudo fdisk -l 使用 fdisk 分区 sudo fdisk /dev/sdb 格式化分区 sudo mkfs -t ext4 /dev/sdb1 挂载硬盘 创建挂载点，新建目录 mkdir ~/disk1 挂载 sudo mount /dev/sdb1 ~/disk1 自动挂载 查找硬盘 UUID ls -l /dev/disk/by-uuid/ 修改 /etc/fstab 文件，实现自动挂载 UUID=b543f8f7-579c-45b5-96d6-31de6fa1a55e /home/lgd/disk1 ext4 defaults 1 2</description></item><item><title>MariaDB中文数据问号解决办法</title><link>https://www.zling.site/post/MariaDB%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E9%97%AE%E5%8F%B7%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Fri, 02 Jul 2021 12:51:41 +0800</pubDate><guid>https://www.zling.site/post/MariaDB%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E9%97%AE%E5%8F%B7%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>在/etc/mysql/conf.d文件夹下修改如下文件的内容，若文件不存在的话就新建： server.cnf [mysqld] character-set-server=utf8 collation-server=utf8_general_ci client.cnf [client] default-character-set=utf8 最后重启MariaDB服务</description></item><item><title>CSharp中发送HTTP请求的方法</title><link>https://www.zling.site/post/CSharp%E4%B8%AD%E5%8F%91%E9%80%81HTTP%E8%AF%B7%E6%B1%82%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Fri, 02 Jul 2021 12:49:27 +0800</pubDate><guid>https://www.zling.site/post/CSharp%E4%B8%AD%E5%8F%91%E9%80%81HTTP%E8%AF%B7%E6%B1%82%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>发送 Get 请求 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // HttpClient is intended to be instantiated once per application, rather than per-use. See Remarks. static readonly HttpClient client = new HttpClient(); static async Task Main() { // Call asynchronous network methods in a try/catch block to handle exceptions. try { HttpResponseMessage response = await client.GetAsync(&amp;#34;http://www.contoso.com/&amp;#34;); response.EnsureSuccessStatusCode(); string responseBody = await response.Content.ReadAsStringAsync(); // Above three lines can be replaced with new helper method below // string responseBody = await client.GetStringAsync(uri); Console.WriteLine(responseBody); } catch(HttpRequestException e) { Console.WriteLine(&amp;#34;\nException Caught!&amp;#34;); Console.WriteLine(&amp;#34;Message :{0} &amp;#34;,e.Message); } } 发送 Post 请求 1 2 3 4 5 6 7 8 9 10 11 using (var httpClient = new HttpClient { BaseAddress = new Uri(cqcPlatformUrl) }) { httpClient.DefaultRequestHeaders.Add(&amp;#34;Test&amp;#34;, &amp;#34;TestValue&amp;#34;);</description></item><item><title>AspNetCore控制器的Action返回结果类型</title><link>https://www.zling.site/post/AspNetCore%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84Action%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%B1%BB%E5%9E%8B/</link><pubDate>Fri, 02 Jul 2021 12:48:31 +0800</pubDate><guid>https://www.zling.site/post/AspNetCore%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84Action%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%B1%BB%E5%9E%8B/</guid><description>特定类型(Specific type) Action可返回原始类型或复杂类型对象（例如 string 或 自定义类型）。以下代码显示返回自定义的Product类型对象： 1 2 3 [HttpGet] public List&amp;lt;Product&amp;gt; Get() =&amp;gt; _repository.GetProducts(); 当同时返回多个对象时，需要返回 ActionResult 类型的对象，将其与前边的多个对象整合。 返回 IEnumerable或 IAsyncEnumer</description></item><item><title>使用Frp实现内网穿透</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</link><pubDate>Fri, 02 Jul 2021 12:46:26 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</guid><description>使用 Frp 实现内网穿透 Frp 程序下载 https://github.com/fatedier/frp/releases frp 程序分为服务端和客户端，其中 frps 开头文件为服务端， frpc 开头文件为客户端 配置服务端 编辑 frps.ini 配置服务端 [common] bind_port = 7400 #客户端与服务端通信端口，要保持一致 vhost_http_port = 8080 #服务端监听的 http 流量端口 vhost_https_port = 8443 #服务端监听的 https 流量端口 token = 123456 #服务端与客户端验证端口，要保持一致，推荐使用</description></item><item><title>使用acmesh申请LetsEncrypt泛域名证书</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8acmesh%E7%94%B3%E8%AF%B7LetsEncrypt%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</link><pubDate>Fri, 02 Jul 2021 12:43:35 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8acmesh%E7%94%B3%E8%AF%B7LetsEncrypt%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</guid><description>使用 acme.sh 申请 Let&amp;rsquo;s Encrypt 泛域名证书 以下申请证书的过程以 NameSilo ，这个域名服务商为例，其它域名服务商的申请细节请结合以下链接参考： https://github.com/Neilpang/acme.sh/wiki/dnsapi 安装 acme.sh curl https://get.acme.sh | sh 获取域名服务商的api key NameSilo https://www.namesilo.com/account_api.php 设置api key 环境变量 以下是 NameSilo 的 api key 设置环境变量的方法，其他域名服务商请参考上方的链接 export Namesilo_Key=&amp;quot;xxxxxxxxxxxxxxxx&amp;quot; 申请证书 acme.sh --issue --dns dns_namesilo --dnssleep 900 -d yourdomain -d *.yourdomain 此处要等</description></item><item><title>安装Jira使用MariaDB数据库</title><link>https://www.zling.site/post/%E5%AE%89%E8%A3%85Jira%E4%BD%BF%E7%94%A8MariaDB%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Fri, 02 Jul 2021 12:40:56 +0800</pubDate><guid>https://www.zling.site/post/%E5%AE%89%E8%A3%85Jira%E4%BD%BF%E7%94%A8MariaDB%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>Jira 安装 安装环境及软件 Windows Server 2016 MariaDB 10.3.14 Jira 8.1.0 mysql-connector-java-5.1.47-bin.jar 步骤 安装 MariaDB 将 MariaDB 的 zip 安装包解压到指定目录，例如 C:\Program Files\MariaDB 新建数据库存储文件夹，例如 C:\Program Files\MariaDB\DB 以管理员身份运行 CMD，运行如下命令： mysql_install_db.exe &amp;ndash;datadir=C:\Program Files\MariaDB\DB &amp;ndash;service=MariaDB &amp;ndash;password=mima &amp;ndash;service 指定 MariaDB 的服务名 &amp;ndash;password 指定 root 密码 启动 MariaDB 服务 sc start MariaDB 进入到 MariaDB mysql -u root -p 为 Jira 创建专用数据库用户 CREATE USER &amp;lsquo;jira&amp;rsquo;@'%' IDENTIFIED BY &amp;lsquo;some_password&amp;rsquo;; GRANT ALL PRIVILEGES ON . TO &amp;lsquo;jira&amp;rsquo;@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;</description></item><item><title>Artifactory破解安装</title><link>https://www.zling.site/post/Artifactory%E7%A0%B4%E8%A7%A3%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 02 Jul 2021 12:39:58 +0800</pubDate><guid>https://www.zling.site/post/Artifactory%E7%A0%B4%E8%A7%A3%E5%AE%89%E8%A3%85/</guid><description>使用Docker安装Artifactory export JFROG_HOME=&amp;quot;/data/jfrog&amp;quot; mkdir -p $JFROG_HOME/artifactory/var/etc/ cd $JFROG_HOME/artifactory/var/etc/ touch ./system.yaml chown -R $UID:$GID $JFROG_HOME/artifactory/var chmod -R 777 $JFROG_HOME/artifactory/var docker run &amp;ndash;name artifactory &amp;ndash;restart always -v $JFROG_HOME/artifactory/var/:/var/opt/jfrog/artifactory -d -p 8081:8081 -p 8082:8082 releases-docker.jfrog.io/jfrog/artifactory-pro:latest 进入Artifatory容器 下载破解jar并运行 /opt/jfrog/artifactory/app/third-party/java/bin/java -jar artifactory-injector-1.1.jar 先破解后生成许可,复制许可 /opt/jfrog/artifactory/app/artifactory/tomcat eyJhcnRpZmFjdG9yeSI6eyJpZCI6IiIsIm93bmVyIjoicjRwMyIsInZhbGlkRnJvbSI6MTYxMzIwMDgxOTUwNiwiZXhwaXJlcyI6NDc2ODg3NDQxOTUwMywidHlwZSI6IkVOVEVSUFJJU0VfUExVUyIsInRyaWFsIjpmYWxzZSwicHJvcGVydGllcyI6e319fQ== 重启容器 访问 http://ip:8082 sudo nano /etc/docker/daemon.json { &amp;ldquo;insecure-registries&amp;rdquo;:[&amp;ldquo;hub.lab.lan:8081&amp;rdquo;] } sudo service docker restart</description></item><item><title>Unity中游戏对象产生碰撞的条件</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E6%B8%B8%E6%88%8F%E5%AF%B9%E8%B1%A1%E4%BA%A7%E7%94%9F%E7%A2%B0%E6%92%9E%E7%9A%84%E6%9D%A1%E4%BB%B6/</link><pubDate>Tue, 22 Jun 2021 22:29:17 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E6%B8%B8%E6%88%8F%E5%AF%B9%E8%B1%A1%E4%BA%A7%E7%94%9F%E7%A2%B0%E6%92%9E%E7%9A%84%E6%9D%A1%E4%BB%B6/</guid><description>其中至少一个物体（必须运动的）必须带有碰撞器（collider）+刚体(Rigidbody)，另一个物体（可以静止也可以运动）也必须至少带有collider 静态碰撞器 没有刚体而有碰撞器的物体，此时该碰撞器就是静态碰撞器。 刚体碰撞器 如果游戏对象既有刚体又有碰撞器，则该碰撞器为刚体碰</description></item><item><title>CSharp调用非托管C++时使用回调函数遇到的问题</title><link>https://www.zling.site/post/CSharp%E8%B0%83%E7%94%A8%E9%9D%9E%E6%89%98%E7%AE%A1C++%E6%97%B6%E4%BD%BF%E7%94%A8%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 07 Jun 2021 16:36:57 +0800</pubDate><guid>https://www.zling.site/post/CSharp%E8%B0%83%E7%94%A8%E9%9D%9E%E6%89%98%E7%AE%A1C++%E6%97%B6%E4%BD%BF%E7%94%A8%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>如果该回调函数会被定时调用时，C#代码需要将回调函数对应的委托实例化成一个静态变量后使用，以避免 GC 将委托释放导致的异常问题。 参考：https://stackoverflow.com/questions/61985465/passing-c-sharp-callback-metho</description></item><item><title>英语中的特殊句式</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%8F%A5%E5%BC%8F/</link><pubDate>Fri, 04 Jun 2021 08:05:06 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%8F%A5%E5%BC%8F/</guid><description>强调句 It is &amp;hellip; that &amp;hellip; I want to go to America this summer. =&amp;gt; It is America that I want to go to this summer. 不能强调动词 / 形容词 倒装句 主谓倒装 全部倒装 谓语动词全在主语前 Here comes the bus. 部分倒装 Only on one occasion have I felt frightened.</description></item><item><title>英语中的非谓语动词</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E9%9D%9E%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D/</link><pubDate>Thu, 03 Jun 2021 09:34:36 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E9%9D%9E%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D/</guid><description>什么是非谓语动词 非谓语动词，又叫非限定动词，非谓语动词是指在句子中不是谓语的动词，主要包括不定式、动名词和分词（现在分词和过去分词），即动词的非谓语形式。非谓语动词除了不能独立作谓语外，可以承担句子的其他成分。 doing \ done \ to do 主动 \ 被动 \ 目的 写法 作定语，修饰名词 与名词的关系决定了使用</description></item><item><title>英语中的定语从句</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5/</link><pubDate>Wed, 02 Jun 2021 09:54:12 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5/</guid><description>位置 名词后，修饰限定名词。 写法 关系词做成分。 关系词指代先行词。 先行词 + 关系词 + 陈述句 先行词 关系词 事物 which/that 人 who/whom/that 谁的 whose 时间 when 地点 where 原因 why 限定和非限定 由先行词的范围明确。 限定 定语从句与所修饰的名词关系紧密 He will call his friend who is working in London. 先行词范围不确定，由定语从句限定范围。 非限定 先行词范围明确。 He will</description></item><item><title>Unity中的欧拉角和四元数</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E6%AC%A7%E6%8B%89%E8%A7%92%E5%92%8C%E5%9B%9B%E5%85%83%E6%95%B0/</link><pubDate>Tue, 01 Jun 2021 17:18:09 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E6%AC%A7%E6%8B%89%E8%A7%92%E5%92%8C%E5%9B%9B%E5%85%83%E6%95%B0/</guid><description>在 Unity 有两种方式用于表示旋转，欧拉角和四元数。其中欧拉角用于查看和编辑，引擎内部使用四元数来表示。 欧拉角 欧拉角具有三个数字，分别表示绕 x 轴、y 轴和 z 轴旋转的角度。当使用欧拉角旋转物体时，需要按照某个特定的顺序依次绕轴旋转，才能够正确旋转。其最主要的问题是会导致万向锁。 万向锁问题 参考</description></item><item><title>CSharp中用线程安全的方式引发事件</title><link>https://www.zling.site/post/CSharp%E4%B8%AD%E7%94%A8%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F%E5%BC%95%E5%8F%91%E4%BA%8B%E4%BB%B6/</link><pubDate>Sat, 29 May 2021 23:47:02 +0800</pubDate><guid>https://www.zling.site/post/CSharp%E4%B8%AD%E7%94%A8%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F%E5%BC%95%E5%8F%91%E4%BA%8B%E4%BB%B6/</guid><description>在不考虑线程安全的情况下常常会写如下引发事件的代码: 1 2 3 4 5 6 7 // 版本1 public event EventHandle&amp;lt;EventArgs&amp;gt; Something; protected virtual void OnSomething(EventArgs e) { if(Something != null) Something(this, e); } 以上代码在单线程环境下能够正常运行，但是在多线程环境下就有可能导致问题。虽然对 Something 做了空引用的判断，但是在调用 Something 前有可能被另一个线程从委托链中移除委托，使得 Something 为空，导致空引用调</description></item><item><title>英语中的名词性从句</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%90%8D%E8%AF%8D%E6%80%A7%E4%BB%8E%E5%8F%A5/</link><pubDate>Tue, 25 May 2021 09:27:39 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%90%8D%E8%AF%8D%E6%80%A7%E4%BB%8E%E5%8F%A5/</guid><description>宾语从句 写法 陈述句变宾语从句 They understand modern art. =&amp;gt; Many people pretend (that) they understand modern art. 直接做从句，不变化，同时可加 that 不做成分。 特殊疑问句变宾语从句 What is a picture &amp;lsquo;about&amp;rsquo;? =&amp;gt; They always tell you what a picture is &amp;lsquo;about&amp;rsquo;. 一般疑问句变宾语从句 Are my pictures good or not? =&amp;gt; She always tells me whether my pictures are good or not. whether 或 if，建议使用 whether。 位置 动宾 介宾 形容词加宾语从句 表语从句 写法 同宾语</description></item><item><title>Unity中的Tilemap</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84Tilemap/</link><pubDate>Tue, 18 May 2021 15:06:16 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84Tilemap/</guid><description>用法 导入图片资源，并将其 Texture Type 设置为 (2D Sprite and UI) 创建 Tilemap 打开 TilePalette 窗口，创建 Palette Grid Grid 对象用于对齐瓦片等对象。 TileMap Tile RuleTile RuleTile的Inspection界面存在一个九宫格用于配置Tile的绘制规则。中心表示当前的Tile，其它八个方向表示相邻的其它Tile。 选项 图标 描述 Don&amp;rsquo;t Care 空白 Rule Tile 会忽略这个位</description></item><item><title>英语中的状语从句</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E7%8A%B6%E8%AF%AD%E4%BB%8E%E5%8F%A5/</link><pubDate>Tue, 18 May 2021 09:55:19 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E7%8A%B6%E8%AF%AD%E4%BB%8E%E5%8F%A5/</guid><description>构成 主句 + 从属连词 + 完整的陈述句 其中 从属连词 不作句子成分。 位置 主句前 or 主句后 主谓之间 种类 状语从句 从属连词 备注 时间状语从句 when, while, as, before, after, since, until, as soon as, &amp;hellip; 地点状语从句 where 原因状语从句 because, since, as 结果状语从句 so/such&amp;hellip;that&amp;hellip;, so that&amp;hellip; so 后面加形容词或副词，such 后加名词或名词词组 目的状语从句 so that&amp;hellip;, in order that&amp;hellip; so that 后有情态动词 条</description></item><item><title>Unity中的Sprites</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84Sprites/</link><pubDate>Mon, 17 May 2021 20:32:36 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84Sprites/</guid><description>什么是 Sprites Sprites 是 2D 图形对象，在 3D 中本质是标准纹理。 Unity 中的 Sprite 工具 Sprite Creator 用于创建占位用的 Sprite，之后有具体的素材后再替换。 Sprite Editor 用于从一张图片或纹理中切割出多个 Sprite。通常会将关联的 Sprite 放入一张图片中，以形成图集，降低资源消耗。 Sprite Packer 使用Sprite Packer可以优化项目对视频内存</description></item><item><title>英语中的并列句</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%88%97%E5%8F%A5/</link><pubDate>Mon, 17 May 2021 09:48:10 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%88%97%E5%8F%A5/</guid><description>并列连词 顺接 &amp;hellip;and&amp;hellip; &amp;hellip;和&amp;hellip; both&amp;hellip;and&amp;hellip; 两者都 not only&amp;hellip;but&amp;hellip;as well 不但&amp;hellip;而且&amp;hellip; not only&amp;hellip;but also&amp;hellip; &amp;hellip;和&amp;hellip; not only&amp;hellip;but&amp;hellip; &amp;hellip;和&amp;hellip; 转折 &amp;hellip;but&amp;hellip; &amp;hellip;但是&amp;hellip; &amp;hellip;yet&amp;hellip; &amp;hellip;但是&amp;hellip; &amp;hellip;while&amp;hellip; &amp;hellip;但</description></item><item><title>不会做游戏之2d游戏地图</title><link>https://www.zling.site/post/%E4%B8%8D%E4%BC%9A%E5%81%9A%E6%B8%B8%E6%88%8F%E4%B9%8B2d%E6%B8%B8%E6%88%8F%E5%9C%B0%E5%9B%BE/</link><pubDate>Sun, 16 May 2021 17:21:16 +0800</pubDate><guid>https://www.zling.site/post/%E4%B8%8D%E4%BC%9A%E5%81%9A%E6%B8%B8%E6%88%8F%E4%B9%8B2d%E6%B8%B8%E6%88%8F%E5%9C%B0%E5%9B%BE/</guid><description>生成2d地图的方式 整体绘制 瓷砖式拼接（Tilemap） 算法生成 使用 Tilemap 创建 2d 地图</description></item><item><title>英语中的形容词和副词</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%BD%A2%E5%AE%B9%E8%AF%8D%E5%92%8C%E5%89%AF%E8%AF%8D/</link><pubDate>Sun, 16 May 2021 11:24:15 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%BD%A2%E5%AE%B9%E8%AF%8D%E5%92%8C%E5%89%AF%E8%AF%8D/</guid><description>形容词/副词的作用 形容词修饰名词 副词修饰动词、句子、其他形容词或副词。 形容词/副词的三种比较级别 最高级 adj./adv.的最高级 + (介词短语表示范围) 三者以上 形式 -est / the most 最高级前通常加 The 比较级 adj./adv.的比较级 + (than 比较对象) 两者、两个部分 形式 -er / more 原级比较 as + adj./a</description></item><item><title>不会写游戏文档</title><link>https://www.zling.site/post/%E4%B8%8D%E4%BC%9A%E5%86%99%E6%B8%B8%E6%88%8F%E6%96%87%E6%A1%A3/</link><pubDate>Fri, 14 May 2021 17:44:14 +0800</pubDate><guid>https://www.zling.site/post/%E4%B8%8D%E4%BC%9A%E5%86%99%E6%B8%B8%E6%88%8F%E6%96%87%E6%A1%A3/</guid><description>文档的种类 单页说明书 十页说明书 游戏流程表 游戏设计文档 单页说明书 单页说明书是对游戏的一个概括总览。 内容 游戏名称 游戏系统 目标玩家年龄 预计 ESRB 分级 游戏故事概要，着重描述可玩性 游戏玩法的独特性 与众不同的卖点 竞品 十页说明书 第一页：游戏名称 游戏名 游戏系统 目标玩家年龄 预计 ESRB 定级 计划发行日期 第二页</description></item><item><title>设计模式之模板方法模式（TemplateMethod）</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8FTemplateMethod/</link><pubDate>Mon, 10 May 2021 11:36:42 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8FTemplateMethod/</guid><description>定义 在一个操作方法中定义算法流程，其中某些步骤由子类完成。模板方法模式让子类在不变更原有流程的情况下，还能够重新定义其中的步骤。</description></item><item><title>英语中的介词短语</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E4%BB%8B%E8%AF%8D%E7%9F%AD%E8%AF%AD/</link><pubDate>Mon, 10 May 2021 10:17:52 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E4%BB%8B%E8%AF%8D%E7%9F%AD%E8%AF%AD/</guid><description>形式 prep. + n. / pron. / doing = 介词短语（介宾结构） 时间介词 介词 表达含义 备注 at/on/in 在&amp;hellip;时间点/时间上/时间内 on 常接某一天 before/after 在&amp;hellip;时间之前/之后 form, since 自从&amp;hellip;时间 by, untill 截止到（直到）&amp;hellip;时间 for 持续&amp;hellip;时间 during 在&amp;hellip;期间 地点/方位介</description></item><item><title>设计模式之策略模式（Strategy）</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8FStrategy/</link><pubDate>Thu, 06 May 2021 17:06:53 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8FStrategy/</guid><description>定义 定义一组算法，并封装每个算法，使其可相互替换使用。根据不同的条件选择不同的策略。 有多种方式实现同一个目的（或达到相似的结果）时，</description></item><item><title>算法之排序</title><link>https://www.zling.site/post/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/</link><pubDate>Thu, 06 May 2021 12:24:35 +0800</pubDate><guid>https://www.zling.site/post/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/</guid><description>选择排序 算法描述 算法复杂度 c# 代码实现 插入排序 算法描述 算法复杂度 c# 代码实现 希尔排序 算法描述 算法复杂度 c# 代码实现 归并排序 算法描述 将要排序的数组分成两半分别排序后归并。 算法复杂度 时间复杂度 NlogN 空间复杂度 N c# 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37</description></item><item><title>英语中的主宾表语的变化</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E4%B8%BB%E5%AE%BE%E8%A1%A8%E8%AF%AD%E7%9A%84%E5%8F%98%E5%8C%96/</link><pubDate>Wed, 05 May 2021 08:59:49 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E4%B8%BB%E5%AE%BE%E8%A1%A8%E8%AF%AD%E7%9A%84%E5%8F%98%E5%8C%96/</guid><description>由什么充当 名词/代词 非谓语动词 doing 非谓语动词 to do 从句 非谓语动词 doing 作主语（放句首） 作宾语（介词后 及物动词后） to do 作主语 常用：It is + adj. (+ for sb.) + to do sth. It takes (+ sb.) + some time + to do sth. 作宾语（及物动词后）</description></item><item><title>Protobuf用法记录</title><link>https://www.zling.site/post/Protobuf%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 04 May 2021 16:41:42 +0800</pubDate><guid>https://www.zling.site/post/Protobuf%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description>步骤 安装 Protocol 编译器 下载链接 文件名：protoc-$VERSION-$PLATFORM.zip 根据自己所在的开发环境下载。 或者 安装 Google.Protobuf.Tools NuGet 包 Protocal 运行时安装 安装 Google.Protobuf NuGet 包 Proto 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 syntax = &amp;#34;proto3&amp;#34;; // 使用的语法 import &amp;#34;other.proto&amp;#34;; // 引用其他消息 package my.project; // 打包，命名空间 option</description></item><item><title>使用Serilog作为日志系统</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Serilog%E4%BD%9C%E4%B8%BA%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 03 May 2021 22:21:58 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Serilog%E4%BD%9C%E4%B8%BA%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid><description>使用 简单使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 using System; using Serilog; namespace LogDemo { class Program { static void Main(string[] args) { Log.Logger = new LoggerConfiguration().WriteTo.Console().CreateLogger(); Log.Information(&amp;#34;The global logger has been configured&amp;#34;); } } } 通过设置 Log 类的静态成员 Logger 后，就可以使用 Log 类的静态方法输出日志。 完整用法（包括文件输出） 添加 Nuget 包 Serilog Serilog.Sinks.Console Serilog.Sinks.File code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 using System; using Serilog; namespace SerilogExample {</description></item><item><title>设计模式之桥接模式（Bridge）</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8FBridge/</link><pubDate>Sun, 02 May 2021 10:39:22 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8FBridge/</guid><description>桥接模式 定义 将抽象和实现分离，以达到二者独立进化的目的。 UML 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 public abstract class Implementor { public abstract void OperatorImp(); } public class ConcreteImplementor1 : Implementor { public override void OperatorImp() { Debug.Log($&amp;#34;执行{nameof(ConcreteI</description></item><item><title>使用Docker部署Nexus3</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Nexus3/</link><pubDate>Sat, 01 May 2021 18:35:28 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Nexus3/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 version:&amp;#34;3.7&amp;#34;services:nexus3:image:sonatype/nexus3restart:unless-stoppedports:- &amp;#34;8081:8081&amp;#34;volumes:- nexus_data:/nexus-datacontainer_name:nexus3volumes:nexus_data:</description></item><item><title>设计模式之中介者模式（Mediator）</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8FMediator/</link><pubDate>Sat, 01 May 2021 12:15:01 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8FMediator/</guid><description>中介者模式 定义 将子系统间的互动委托给中介者，减少子系统相互调用的耦合，子系统通过中介者交互。 UML 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 public abstract class Mediator { public abstract void SendMessage(Colleague colleague, string message); }</description></item><item><title>Debian用法记录</title><link>https://www.zling.site/post/Debian%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Sat, 01 May 2021 10:17:40 +0800</pubDate><guid>https://www.zling.site/post/Debian%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description>关机 1. systemctl poweroff 重启 1. systemctl reboot 设置临时环境变量 export PATH=$PATH:/home/xyz/Tesseract/bintesseract 设置永久环境变量 1. 对所有用户 // 编辑 /etc/profile export PATH=&amp;quot;$PATH:/home/xyz/Tesseract/bin&amp;quot; 2. 对当前用户 // 编辑 ~/.bashrc export PATH=&amp;quot;$PATH:/home/xyz/Tesseract/bin&amp;quot; 最后需要 source ~/.bashrc 查看版本 cat /etc/issue 挂载新硬盘 1 2 3 4 5 6 7 8 9 10 11 12 13 14 sudo fdisk -l // 查看硬盘设备及分区 sudo fdisk /dev/sda // 操作硬盘 sudo mkfs -t ext4 -c /dev/sda1 // 格式化分区 -c 用于检查坏道，比较耗时。 // 挂载分区 sudo mkdir /mnt/data1 sudo mount /dev/sda1</description></item><item><title>Docker常用命令</title><link>https://www.zling.site/post/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Fri, 30 Apr 2021 17:40:59 +0800</pubDate><guid>https://www.zling.site/post/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>进入容器 docker exec -it [容器ID] /bin/bash 创建卷 docker volume create my-vol 列出所有卷 docker volume ls 查看卷详情 docker volume inspect my-vol 移除卷 docker volume rm my-vol 修改 Docker 的默认存储路径 sudo docker info sudo nano /etc/docker/daemon.json { &amp;quot;data-root&amp;quot;: &amp;quot;/www/docker&amp;quot; }</description></item><item><title>设置模式之外观模式（Facade）</title><link>https://www.zling.site/post/%E8%AE%BE%E7%BD%AE%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8FFacade/</link><pubDate>Thu, 29 Apr 2021 22:20:45 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E7%BD%AE%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8FFacade/</guid><description>外观模式 定义 为子系统定义一组统一的接口，这个高级的接口会让子系统更容易被使用。 优点 统一接口，避免了客户端与各个子系统间的耦合。 增加了客户端复用的能力。 易于分工，使用者不必关心子系统的实现和使用细节，只需调用外观模式定义的高级接口就行。 注意事项 在使用外观模式时，十分容易将高级接口设</description></item><item><title>微积分中的极限</title><link>https://www.zling.site/post/%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%AD%E7%9A%84%E6%9E%81%E9%99%90/</link><pubDate>Thu, 29 Apr 2021 10:58:02 +0800</pubDate><guid>https://www.zling.site/post/%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%AD%E7%9A%84%E6%9E%81%E9%99%90/</guid><description>基本思想 自变量无限趋近某一值，其对应的因变量也无限趋近某一确定值，要多接近就有多接近。具体到函数 f(x) 就是 x 无限趋近某一值 a，f(x) 也无限趋近某一确定值 b，且 f(a) 与 b 没有必然联系。 $$ \lim_{x\rightarrow a}{f(x)}=b $$ 左极限和右极限 以 x=a 为例，x 从 x 轴不断趋近 a，此时 f(x) 值就趋近于某一值 b，此时 b 就是 f(x) 在 x 趋向于 a 的</description></item><item><title>英语中谓语动词的语态</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E8%AF%AD%E6%80%81/</link><pubDate>Thu, 29 Apr 2021 08:53:32 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E8%AF%AD%E6%80%81/</guid><description>主动语态 不是被动就是主动。 被动语态 及物动词有被动语态。不及物动词需要搭配介词才可以有被动语态。 形式 be + done be 表示被动的时间和人称变化（单复数） done 表示被动的动作 与时态结合的例子 例子 时态 These critics were forgotten. 一般过去时 These critics are forgotten. 一般现在时 These critics will be forgotten. 一般将来时 These critics would be forgotten. 过去将来时 These critics were being forgotten. 过去进行时 These critics</description></item><item><title>英语中谓语动词的情态</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E6%83%85%E6%80%81/</link><pubDate>Wed, 28 Apr 2021 10:58:02 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E6%83%85%E6%80%81/</guid><description>形式 情态动词 + 动词原形 情态动词没有人称变化 情态动词的时态变化有限（现在和过去） 常用的情态动词 现在时 过去时 must * can could will would shall should may might 其中 could、would、should 和 might 不只可以表示过去，还可以表示现在的更委婉更客气的语气。 must 必要性 必须 = have to 推测 肯定，一定 几乎接近事实 推测现在 must do 推</description></item><item><title>设计模式之状态模式（State）</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8FState/</link><pubDate>Mon, 26 Apr 2021 23:41:37 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8FState/</guid><description>定义 让一个对象的行为随着内部状态的变更而改变，而该对象就像是换了类一样。 UML Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 using UnityEngine; public class Context { private State _state; public void Request(int value) { _state.Handle(value); } public void SetState(State state) { Debug.Log($&amp;#34;Context.SetState:{state}&amp;#34;); _state = state; } } public abstract class State</description></item><item><title>Unity中的RuntimeRuntimeInitializeOnLoadMethodAttribute</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84RuntimeRuntimeInitializeOnLoadMethodAttribute/</link><pubDate>Mon, 26 Apr 2021 22:27:49 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84RuntimeRuntimeInitializeOnLoadMethodAttribute/</guid><description>被此特性标注的方法将在 Awake 方法之后被 Unity 循环调用，而且被此特性标记的所有方法，它们之间的执行顺序不是固定的。 示例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 using UnityEngine; public class MyTest : MonoBehaviour { [RuntimeInitializeOnLoadMethod] static void OnRuntimeMethodLoad() { Debug.Log(&amp;#34;After Scene is loaded and game is running&amp;#34;); } [RuntimeInitializeOnLoadMethod] static void OnSecondRuntimeMethodLoad() { Debug.Log(&amp;#34;SecondMethod After Scene is loaded and game is running.&amp;#34;); } private void Awake() { Debug.Log(&amp;#34;Awake method&amp;#34;); } private void Start() { Debug.Log(&amp;#34;Start method&amp;#34;); } } 结果：</description></item><item><title>CSharp中的XML序列化</title><link>https://www.zling.site/post/CSharp%E4%B8%AD%E7%9A%84XML%E5%BA%8F%E5%88%97%E5%8C%96/</link><pubDate>Sat, 24 Apr 2021 22:04:09 +0800</pubDate><guid>https://www.zling.site/post/CSharp%E4%B8%AD%E7%9A%84XML%E5%BA%8F%E5%88%97%E5%8C%96/</guid><description>可 XML 序列化的内容 公有类的公有可读写属性和字段 接口 ICollection 或 IEnumerable 的实现类 XmlElement 对象 XmlNode 对象 DataSet 对象 XML 使用的 Attribute 通常 Xml 元素的名称由类名或成员名称，但是也可以通过 Attribute 去控制。 XmlArrayAttribute 和 XmlArrayItemAttribute XmlArrayAttribute 和 XmlArrayItemAttribute 用于控制数组的序列化。 XmlArrayAttribute 可以指定数组序列化时的 Xml元素名称。 1 2 3 4 public class Group { [XmlArray(&amp;#34;TeamMembers&amp;#34;)] public Employee[] Employees; } 1 2 3 4 5 6 7 &amp;lt;Group&amp;gt; &amp;lt;TeamMembers&amp;gt; &amp;lt;!-- 如果没有指定</description></item><item><title>设计模式之面向对象的设计原则</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</link><pubDate>Fri, 23 Apr 2021 16:33:55 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</guid><description>单一职责原则 每个类只负责一件事 开闭原则 对扩展开放，对修改关闭。将类中的功能上提抽象为接口，具体的功能实现下放到子类。 里氏替换原则 使用到父类的地方都能够用子类去替换。对于具体使用到哪个子类是无感的，透明的。 依赖倒置原则 高层模块不应该直接依赖底层模块，而是依赖于抽象。(让底层模块通过</description></item><item><title>使用Docker运行Consul</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CConsul/</link><pubDate>Fri, 23 Apr 2021 16:16:07 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CConsul/</guid><description>单节点 开发模式 mkdir -p /data/consul-data mkdir -p /data/consul-conf docker run -d -p 8500:8500 -p 8600:8600/udp -v /data/consul-data:/consul/data -v /data/consul-conf:/consul/config --name=consul_server consul agent -dev -ui -node=consul-server -bootstrap-expect=1 -client=0.0.0.0 -data-dir /consul/data -config-dir /consul/config</description></item><item><title>使用Docker运行Redis</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CRedis/</link><pubDate>Fri, 23 Apr 2021 14:43:14 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CRedis/</guid><description>Use Command 1 docker run -d --restart=always --name redis -p 6379:6379 redis --requirepass 123456</description></item><item><title>使用Docker运行MongoDB</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CMongoDB/</link><pubDate>Fri, 23 Apr 2021 12:37:29 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CMongoDB/</guid><description>Use Docker-Compose version: '3.1' services: mongo: image: mongo restart: always environment: MONGO_INITDB_ROOT_USERNAME: root MONGO_INITDB_ROOT_PASSWORD: example volumes: - db_store:/data/db ports: - 27017:27017 volumes: db_store: {}</description></item><item><title>英语中的词组记录</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E8%AF%8D%E7%BB%84%E8%AE%B0%E5%BD%95/</link><pubDate>Fri, 23 Apr 2021 09:56:15 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E8%AF%8D%E7%BB%84%E8%AE%B0%E5%BD%95/</guid><description>set out 出发 be（am/is/are）away 离开 be动词带领的词组通常表示在某种状态,与 leave 的区别是 leave 是瞬间动词，无持续性。be away 表状态，可持续，可与一段时间连用。be 加形容词表示状态。 take part in 参加 stage fright 怯场 drive sb. mad 使某人发疯 for some reasons 因为某些原因 for some reason 因为某种原因 be determined to do sth. 下定决心做某事</description></item><item><title>英语中谓语动词的时态</title><link>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E6%97%B6%E6%80%81/</link><pubDate>Wed, 21 Apr 2021 10:52:21 +0800</pubDate><guid>https://www.zling.site/post/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9A%84%E6%97%B6%E6%80%81/</guid><description>时态的种类 时态 过去 现在 将来 过去将来 一般 * * * * 进行 * * 完成 * * 完成进行 星号表示重点时态 一般过去时 形式：过去式 did 用法：表示过去的事（无关现在） 否定/疑问： 无实义(be动词) 有实义 原句 He was happy. He liked English. 否定句 He was not happy. He did not like English. 疑问句 Was he happy? Did he like English? 特殊疑问句 How was he? What did he like? 注意：助动词后谓语动</description></item><item><title>Unity中的资源系统</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F/</link><pubDate>Thu, 15 Apr 2021 12:15:15 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F/</guid><description>资源 Unity通过将资源的唯一 ID 写入与资源同名的 .meta 文件来确保对资源的唯一引用。 新增的资源 Unity 都会创建与之对应的 .meta 文件 Unity 读取并处理 Assets 文件夹中的任何文件，并将其转换成可直接用于游戏内容的数据格式，存储在 Libraray 文件夹中，而原文件仍然保留在 Assets 文件夹中 .meta 文件不止包含资源 ID 同时也包含资源导入设置的</description></item><item><title>Unity中事件函数的执行顺序</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</link><pubDate>Wed, 14 Apr 2021 09:37:25 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</guid><description>阶段 主要阶段 初始化阶段，包含 Awake() Start() 物理系统更新阶段，包含 FixedUpdate()、动画更新、OnTriggerXXX、OnCollisionXXX，物理系统可能一帧内更新多次。 输入事件，OnMouseXXX 游戏逻辑阶段，Update、从协程恢复、动画更新、LateUpdate 游戏</description></item><item><title>设计模式之单例模式</title><link>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Tue, 13 Apr 2021 20:54:49 +0800</pubDate><guid>https://www.zling.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>简述 单例模式用于生成特定类在程序的完整生命周期中唯一的实例化对象。 实现方式 方式一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class Singleton { private static Singleton _instance; public static Singleton Instance { get { if(_instance == null) _instance = new Singleton(); return _instance; } } private Singleton() { //TODO anything } } 懒汉式或者说是延迟加载的主要问题在于线程不安全，在多线程环境下，容易创建多个实例，也就无法保证类实</description></item><item><title>CSharp的Environment类</title><link>https://www.zling.site/post/CSharp%E7%9A%84Environment%E7%B1%BB/</link><pubDate>Wed, 07 Apr 2021 18:39:41 +0800</pubDate><guid>https://www.zling.site/post/CSharp%E7%9A%84Environment%E7%B1%BB/</guid><description>1 var ev = Environment.GetEnvironmentVariable(&amp;#34;ev&amp;#34;);</description></item><item><title>MySql的用法记录</title><link>https://www.zling.site/post/MySql%E7%9A%84%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 06 Apr 2021 22:12:49 +0800</pubDate><guid>https://www.zling.site/post/MySql%E7%9A%84%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description>MySql 中的DataType 类型 含义 范围 数值类型 INT 整数 -2147483647 ~ 2147483647 TINYINT 极小整数 -128 ~ 127 SMALLINT 小整数 -32768 ~ 32767 MEDIUMINT 中等整数 -8388608 ~ 8388607 BIGINT 大整数 -9223372036854775808 ~ 9223372036854775807 FLOAT 单精度浮点数 -3.402823466E+38 ~ -1.175494351E-38 0 1.175494351E-38 ~ 3.402823466E+38 DOUBLE 双精度浮点数 -1.7976931348623157E+308 ~ -2.2250738585072014E-308 0 2.2250738585072014E-308 ~ 1.7976931348623157E+308 DECIMAL 精确小数 DECIMAL(最大位数，小数点后的位数) 最大位数可指定不大于65的值，小数点之后的位数不大于30 字</description></item><item><title>Rider用法记录</title><link>https://www.zling.site/post/Rider%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 06 Apr 2021 12:31:02 +0800</pubDate><guid>https://www.zling.site/post/Rider%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</guid><description>设置Snippet File-&amp;gt;Setting-&amp;gt;Editor-&amp;gt;livetemplates 右上角的按钮从上到下分别是：新建Snippet，复制已有的Snippet，删除Snippet 可通过设置变量（$variablename$）来占位，使用时在变量的位置填入内容即可，或编辑变量，使用默认的宏。 示例 1 2 3 4 5 6 7 8 private static $classname$ _instance; public static $classname$ Instance =&amp;gt; _instance ??= new $classname$(); private $classname$ () { $END$</description></item><item><title>Unity中引用第三方程序集</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E5%BC%95%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E7%A8%8B%E5%BA%8F%E9%9B%86/</link><pubDate>Mon, 05 Apr 2021 22:32:04 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E5%BC%95%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E7%A8%8B%E5%BA%8F%E9%9B%86/</guid><description>在 Unity 中是通过插件（注意，此处的插件特指预编译的程序集或原生库，与编辑器插件代码区分开）的形式引用第三方程序集或原生库，其中引用的 .NET 程序集称作托管插件，原生库为原生插件。 插件的存放位置影响其导入设置 文件夹 默认设置 Assets/../Editor 将插件设置为仅与 Editor 兼容，在构建到平台时不会使用。 Assets/../</description></item><item><title>CSharp中的压缩和解压</title><link>https://www.zling.site/post/CSharp%E4%B8%AD%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B/</link><pubDate>Mon, 05 Apr 2021 17:28:17 +0800</pubDate><guid>https://www.zling.site/post/CSharp%E4%B8%AD%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B/</guid><description>压缩和解压相关类 在 System.IO.Compression 中包含了有关压缩和解压的类： ZipFile ZipArchive ZipArchiveEntry DeflateStream GZipStream 文件的压缩和解压 流的压缩和解压</description></item><item><title>Unity中的项目设置说明</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E8%AF%B4%E6%98%8E/</link><pubDate>Mon, 05 Apr 2021 14:11:24 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E8%AF%B4%E6%98%8E/</guid><description>项目设置 Edit &amp;gt; Project Settings 此处打开项目设置窗口。 Player Player 界面用于设置最终生成的游戏包相关的设置。多数与具体平台有关。 Android Other Settings Configuration API Compatibility Level .Net Standard 2.0 兼容 .NET Standard 2.0。生成较小的构建并具有完整的跨平台支持。 兼容 .NET Framework 4（包括 .NET Standard 2.0 配置文件中的所有内容以及其他 API）。如果使用的库需要访问 .NET Standard 2.0 中未包含的 API，</description></item><item><title>Unity中的特殊文件夹和脚本编译顺序</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E8%84%9A%E6%9C%AC%E7%BC%96%E8%AF%91%E9%A1%BA%E5%BA%8F/</link><pubDate>Mon, 05 Apr 2021 13:24:47 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E8%84%9A%E6%9C%AC%E7%BC%96%E8%AF%91%E9%A1%BA%E5%BA%8F/</guid><description>特殊文件夹 Assets Assets 文件夹是包含 Unity 项目使用的资源的主文件夹。Editor 中的 Project 窗口的内容直接对应于 Assets 文件夹的内容。大多数 API 函数都假定所有内容都位于 Assets 文件夹中，因此不要求显式提及该文件夹。但是，有些函数需要将 Assets 文件夹作为路径名的一部分添加（例如，AssetDatabase 类中的一些函数）</description></item><item><title>Unity中的程序集定义</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%AE%9A%E4%B9%89/</link><pubDate>Mon, 05 Apr 2021 13:15:45 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%AE%9A%E4%B9%89/</guid><description>程序集定义（Assembly Definitions） Unity 使用程序集定义和程序集引用（Assembly References）组织代码结构，同时 Unity 默认使用预定义的程序集，Assembly-CSharp.dll，来组织代码。 但是这种结构并不适合中大型项目，单一程序集将导致代码结构不够清晰</description></item><item><title>使用Excel生成xml</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Excel%E7%94%9F%E6%88%90xml/</link><pubDate>Sun, 04 Apr 2021 22:45:07 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Excel%E7%94%9F%E6%88%90xml/</guid><description>制作 XML 模板 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;root&amp;gt; &amp;lt;item ID=&amp;#34;&amp;#34;&amp;gt; &amp;lt;surname&amp;gt;&amp;lt;/surname&amp;gt; &amp;lt;man&amp;gt;&amp;lt;/man&amp;gt; &amp;lt;woman&amp;gt;&amp;lt;/woman&amp;gt; &amp;lt;/item&amp;gt; &amp;lt;item ID=&amp;#34;&amp;#34;&amp;gt; &amp;lt;surname&amp;gt;&amp;lt;/surname&amp;gt; &amp;lt;man&amp;gt;&amp;lt;/man&amp;gt; &amp;lt;woman&amp;gt;&amp;lt;/woman&amp;gt; &amp;lt;/item&amp;gt; &amp;lt;/root&amp;gt; 在 Excel 选项中启用开发工具 Excel 映射 XML 模板 然后映射元素，填充数据 使用开发工具的 XML 导出，即可生成 XML 文件</description></item><item><title>Unity中获取对象的方法</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Sun, 04 Apr 2021 17:39:33 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>直接关联 在脚本中创建public的想要关联的游戏对象类型的变量，随后在inspector中关联对应的游戏对象即可 1 2 3 4 5 6 public class Enemy : MonoBehaviour { public GameObject player; // 其他变量和函数... } 子游戏对象 使用父游戏对象的变换组件来检索子游戏对象（因为所有游戏对象都具有隐式变换） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description></item><item><title>Unity中的资源加载</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/</link><pubDate>Sun, 04 Apr 2021 16:18:57 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/</guid><description>加载方式 将 Prefab 拖拽到 Inspector 的脚本上 这是最简单的方式，但是在实际项目中通常不使用，因为这种方式不够灵活，拖拽的方式低效，存在大量的隐式耦合。 1 2 3 4 5 6 7 8 9 public class Test : MonoBehaviour { public GameObject prefab; void Start() { var go = GameObject.Instantiate(prefab); } } 将 Prefab 放到 Resources 文件夹下，通过 Resources.Load 方法加载 这种方式实现也很简单，虽然比上一种方式好些，但实际项目中也不</description></item><item><title>Unity中的场景</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E5%9C%BA%E6%99%AF/</link><pubDate>Sun, 04 Apr 2021 16:18:51 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E5%9C%BA%E6%99%AF/</guid><description>Scene 场景是 Unity 中由于放置游戏对象和UI元素的资源文件。 创建场景 使用新建场景对话框（ New Scene Dialog）根据指定的场景模板创建场景。 使用菜单或项目窗口根据项目基本的场景模板创建场景（这是最常见的方式）。 Scene 模板 加载场景 无论是同步加载还是异步加载，都需要将 Scene 在 BuildSettings 中设置好。 同步加载场景 1 2 3 4</description></item><item><title>Unity中实现存档的方式</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%AD%98%E6%A1%A3%E7%9A%84%E6%96%B9%E5%BC%8F/</link><pubDate>Sun, 04 Apr 2021 13:23:06 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%AD%98%E6%A1%A3%E7%9A%84%E6%96%B9%E5%BC%8F/</guid><description>PlayerPrefs PlayerPrefs 是 Unity 中用于存储用户数据的类，且只能够存储一些基本类型数据。 存储路径 存储路径取决于所在操作系统。 Windows: 存在注册表的 HKCU\Software\ExampleCompanyName\ExampleProductName Key 下 Windows Store Apps: 存在 %userprofile%\AppData\Local\Packages[ProductPackageId]\LocalState\playerprefs.dat 文件里 macOS: ~/Library/Preferences/com.ExampleCompanyName.ExampleProductName.plist Linux: ~/.config/unity3d/ExampleCompanyName/ExampleProductName 静态方法 方法名 描述 DeleteAll Removes all keys and values from the preferences. Use with caution. DeleteKey Removes the given key from the PlayerPrefs. If the key does not exist, DeleteKey has no impact. GetFloat Returns the value corresponding to key in the preference file if it exists. GetInt Returns the value corresponding to key in the preference file if it exists. GetString</description></item><item><title>Unity中UGUI的自适应</title><link>https://www.zling.site/post/Unity%E4%B8%ADUGUI%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94/</link><pubDate>Sat, 03 Apr 2021 14:35:22 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%ADUGUI%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94/</guid><description>设置 Canvas 的缩放模式为 Match Width Or Height 设置 Canvas 的 Match 为 Height（如果为横板游戏的话） 然后设置 UI 组件的锚点</description></item><item><title>Unity中的光照</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E5%85%89%E7%85%A7/</link><pubDate>Fri, 02 Apr 2021 16:11:55 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E5%85%89%E7%85%A7/</guid><description>Unity中的光照类型 直接光照和间接光照 直接光照指照射到物体表面只反射一次后就传入感应器的光照，而间接光照指光线经过多次反射后再传入感应器的关照，这两种光照 Unity 都可以通过计算获取。 实时光照和烘培光照 实时光照指 Unity 在运行时计算光照，而烘培光照指将预计算的光照信息存储后有 Unity 在运行时读取恢</description></item><item><title>Unity的Android开发环境配置</title><link>https://www.zling.site/post/Unity%E7%9A%84Android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 02 Apr 2021 14:47:36 +0800</pubDate><guid>https://www.zling.site/post/Unity%E7%9A%84Android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid><description>Android环境配置 添加 Android 开发相关组件 启用 USB 调试 将手机设置为开发者模式，具体机型可能有所不同，但通常都是连续点击设置里的 Build number 多次即可进入开发者模式。之后在开发者选项里启用 USB 调试。 其他 使用自定义的 SDK 路径 可在 Preferences &amp;gt; External tools 里设置自定义的 SDK等路径 调整 Android SDK Api Level Edit &amp;gt; Project Settings &amp;gt; Player 下可设置此选项</description></item><item><title>Unity中的渲染管线</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/</link><pubDate>Wed, 31 Mar 2021 16:30:07 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/</guid><description>一个渲染管线通过执行一系列操作获取场景中需要展示的内容并将其显示到场景中。这些操作包括： 剔除 渲染 后期处理 Unity提供的渲染管线 内置渲染管线 内置渲染管线是 Unity 的旧版渲染管线，并且不是基于可编程渲染管线实现的。 内容渲染管线可通过设置不同的渲染管线进行设置，同时可以通过命令缓存（Com</description></item><item><title>Unity中的RnderingPath</title><link>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84RnderingPath/</link><pubDate>Sat, 27 Mar 2021 19:06:07 +0800</pubDate><guid>https://www.zling.site/post/Unity%E4%B8%AD%E7%9A%84RnderingPath/</guid><description>什么是渲染路径 Unity的内置渲染管线支持不同的渲染路径，渲染路径表示了与光照和阴影相关的一系列操作。 何处设置渲染路径 在 Graphics 窗口 Camera 组件 渲染路径的类型 当前共存在四种渲染路径：Forward Rendering、Deferred Shading、Legacy Deferred、Legacy Vertex</description></item><item><title>Unity的Camera组件</title><link>https://www.zling.site/post/Unity%E7%9A%84Camera%E7%BB%84%E4%BB%B6/</link><pubDate>Sat, 27 Mar 2021 14:04:16 +0800</pubDate><guid>https://www.zling.site/post/Unity%E7%9A%84Camera%E7%BB%84%E4%BB%B6/</guid><description>透视模式和正交模式 Unity的相机存在两种相机投影模式，其中透视模式实现了现实世界的效果，即近大远小的透视效果，反之，无近大远小效果的为正交模式。 可视范围的形状 相机(Camera)组件 上图显示的是在内建渲染管线下相机的属性截图 属性 Clear Flags ClearFlags 用于清除相机不同的缓冲区信息集合。 Skybox 使用天空</description></item><item><title>AspNetCore学习记录(1)</title><link>https://www.zling.site/post/AspNetCore%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</link><pubDate>Fri, 26 Mar 2021 22:19:59 +0800</pubDate><guid>https://www.zling.site/post/AspNetCore%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</guid><description>配置MVC 修改Startup文件成如下所示： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.AspNetCore.Http; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; namespace MockSchool { public class Startup { public void ConfigureServices(IServiceCollection services) { // 设置 EnableEndpointRouting 为 false 是为了使用 MVC 默认路由 //services.AddMvc(a =&amp;gt; a.EnableEndpointRouting = false); // 使用 AddControllersWithViews 而不使用 AddMvc 是为了不引入 RazorPages // 等未用到的服务 services.AddControllersWithViews(a =&amp;gt; a.EnableEndpointRouting = false); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env)</description></item><item><title>Markdown语法</title><link>https://www.zling.site/post/Markdown%E8%AF%AD%E6%B3%95/</link><pubDate>Fri, 26 Mar 2021 10:16:51 +0800</pubDate><guid>https://www.zling.site/post/Markdown%E8%AF%AD%E6%B3%95/</guid><description>标题（Headings） 要创建标题，请在单词或短语前面添加井号 (#) 。井号的数量代表了标题的级别。例如，添加三个井号即创建一个三级标题 ### My Header My Header 段落 在每行的的末尾空格两下并回车或是直接在两行间间隔一行空白行，这样就可以形成换行效果。 图片 本地图片 ![图片描述](/iii.png) 网络图</description></item><item><title>使用Docker部署Trilium</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Trilium/</link><pubDate>Thu, 25 Mar 2021 13:26:38 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Trilium/</guid><description>docker-compose 1 2 3 4 5 6 7 8 9 10 version:&amp;#34;3.7&amp;#34;services:trilium:image:zadam/triliumrestart:unless-stoppedports:- &amp;#34;8080:8080&amp;#34;volumes:- /data/trilium/data:/home/node/trilium-data 1 docker-compose up -d 遇到容器里的权限问题 internal/fs/utils.js:269 throw err; ^ Error: EACCES: permission denied, mkdir '/home/node/trilium-data/log' at Object.mkdirSync (fs.js:921:3) at Object.&amp;lt;anonymous&amp;gt; (/usr/src/app/src/services/log.js:7:8) at Module._compile (internal/modules/cjs/loader.js:1015:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1035:10) at Module.load (internal/modules/cjs/loader.js:879:32) at Function.Module._load (internal/modules/cjs/loader.js:724:14) at Module.require (internal/modules/cjs/loader.js:903:19) at require (internal/modules/cjs/helpers.js:74:18) at Object.&amp;lt;anonymous&amp;gt; (/usr/src/app/src/app.js:1:13) at Module._compile (internal/modules/cjs/loader.js:1015:30) { errno: -13, syscall: 'mkdir', code: 'EACCES', path: '/home/node/trilium-data/log' } 解决办法 chown -R 1000:1000 /data/trilium/data/</description></item><item><title>使用Docker部署Caddy</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Caddy/</link><pubDate>Wed, 24 Mar 2021 18:32:49 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Caddy/</guid><description>docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 version:&amp;#34;3.7&amp;#34;services:caddy:image:caddyrestart:unless-stoppedports:- &amp;#34;80:80&amp;#34;- &amp;#34;443:443&amp;#34;volumes:- /data/caddy/Caddyfile:/etc/caddy/Caddyfile- /data/caddy/site:/srv- caddy_data:/data- caddy_config:/configcontainer_name:caddyvolumes:caddy_data:caddy_config: 1 docker-compose up -d 注意一点 /data/caddy/Caddyfile 需要提前创建好 Caddyfile Caddy有两种配置格式：1. json 2. Caddyfile，由于Caddyfile较为简洁，因此选用了这种方式。 Example localhost respond &amp;quot;Hello, world!&amp;quot; 静态内容 your_domain { root * /var/www file_server } 反向代理 your_domain { reverse_proxy your_server_ip:port } Compare 以下是Json格式和Caddyfi</description></item><item><title>使用hugo搭建静态博客</title><link>https://www.zling.site/post/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link><pubDate>Tue, 23 Mar 2021 22:36:20 +0800</pubDate><guid>https://www.zling.site/post/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid><description>安装Go Go安装地址，下载相应版本的Go安装器，按步骤安装即可。 安装Hugo 去Hugo的Github上下载，hugo_extended版的压缩包，然后解压到指定目录，并将Hugo执行文件所在目录加入到Path环境变量中。 在终端中执行以下命令判断Hugo是否安装成功： 1 hugo version 创建Hu</description></item></channel></rss>